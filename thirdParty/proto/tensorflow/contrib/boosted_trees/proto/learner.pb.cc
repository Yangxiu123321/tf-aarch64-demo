// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/boosted_trees/proto/learner.proto

#include "tensorflow/contrib/boosted_trees/proto/learner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace tensorflow {
namespace boosted_trees {
namespace learner {
class TreeRegularizationConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TreeRegularizationConfig>
      _instance;
} _TreeRegularizationConfig_default_instance_;
class TreeConstraintsConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TreeConstraintsConfig>
      _instance;
} _TreeConstraintsConfig_default_instance_;
class LearningRateConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LearningRateConfig>
      _instance;
  const ::tensorflow::boosted_trees::learner::LearningRateFixedConfig* fixed_;
  const ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig* dropout_;
  const ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig* line_search_;
} _LearningRateConfig_default_instance_;
class LearningRateFixedConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LearningRateFixedConfig>
      _instance;
} _LearningRateFixedConfig_default_instance_;
class LearningRateLineSearchConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LearningRateLineSearchConfig>
      _instance;
} _LearningRateLineSearchConfig_default_instance_;
class AveragingConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AveragingConfig>
      _instance;
  float average_last_n_trees_;
  float average_last_percent_trees_;
} _AveragingConfig_default_instance_;
class LearningRateDropoutDrivenConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LearningRateDropoutDrivenConfig>
      _instance;
} _LearningRateDropoutDrivenConfig_default_instance_;
class LearnerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LearnerConfig>
      _instance;
  float feature_fraction_per_tree_;
  float feature_fraction_per_level_;
} _LearnerConfig_default_instance_;
}  // namespace learner
}  // namespace boosted_trees
}  // namespace tensorflow
namespace protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto {
void InitDefaultsTreeRegularizationConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tensorflow::boosted_trees::learner::_TreeRegularizationConfig_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::learner::TreeRegularizationConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::learner::TreeRegularizationConfig::InitAsDefaultInstance();
}

void InitDefaultsTreeRegularizationConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTreeRegularizationConfigImpl);
}

void InitDefaultsTreeConstraintsConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tensorflow::boosted_trees::learner::_TreeConstraintsConfig_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::learner::TreeConstraintsConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::learner::TreeConstraintsConfig::InitAsDefaultInstance();
}

void InitDefaultsTreeConstraintsConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTreeConstraintsConfigImpl);
}

void InitDefaultsLearningRateConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateFixedConfig();
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateDropoutDrivenConfig();
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateLineSearchConfig();
  {
    void* ptr = &::tensorflow::boosted_trees::learner::_LearningRateConfig_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::learner::LearningRateConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::learner::LearningRateConfig::InitAsDefaultInstance();
}

void InitDefaultsLearningRateConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLearningRateConfigImpl);
}

void InitDefaultsLearningRateFixedConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tensorflow::boosted_trees::learner::_LearningRateFixedConfig_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::learner::LearningRateFixedConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::learner::LearningRateFixedConfig::InitAsDefaultInstance();
}

void InitDefaultsLearningRateFixedConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLearningRateFixedConfigImpl);
}

void InitDefaultsLearningRateLineSearchConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tensorflow::boosted_trees::learner::_LearningRateLineSearchConfig_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig::InitAsDefaultInstance();
}

void InitDefaultsLearningRateLineSearchConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLearningRateLineSearchConfigImpl);
}

void InitDefaultsAveragingConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tensorflow::boosted_trees::learner::_AveragingConfig_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::learner::AveragingConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::learner::AveragingConfig::InitAsDefaultInstance();
}

void InitDefaultsAveragingConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAveragingConfigImpl);
}

void InitDefaultsLearningRateDropoutDrivenConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tensorflow::boosted_trees::learner::_LearningRateDropoutDrivenConfig_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig::InitAsDefaultInstance();
}

void InitDefaultsLearningRateDropoutDrivenConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLearningRateDropoutDrivenConfigImpl);
}

void InitDefaultsLearnerConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsTreeRegularizationConfig();
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsTreeConstraintsConfig();
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateConfig();
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsAveragingConfig();
  {
    void* ptr = &::tensorflow::boosted_trees::learner::_LearnerConfig_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::learner::LearnerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::learner::LearnerConfig::InitAsDefaultInstance();
}

void InitDefaultsLearnerConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLearnerConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::TreeRegularizationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::TreeRegularizationConfig, l1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::TreeRegularizationConfig, l2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::TreeRegularizationConfig, tree_complexity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::TreeConstraintsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::TreeConstraintsConfig, max_tree_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::TreeConstraintsConfig, min_node_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::TreeConstraintsConfig, max_number_of_unique_feature_columns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearningRateConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearningRateConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::boosted_trees::learner::LearningRateConfigDefaultTypeInternal, fixed_),
  offsetof(::tensorflow::boosted_trees::learner::LearningRateConfigDefaultTypeInternal, dropout_),
  offsetof(::tensorflow::boosted_trees::learner::LearningRateConfigDefaultTypeInternal, line_search_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearningRateConfig, tuner_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearningRateFixedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearningRateFixedConfig, learning_rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig, max_learning_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig, num_steps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::AveragingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::AveragingConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::boosted_trees::learner::AveragingConfigDefaultTypeInternal, average_last_n_trees_),
  offsetof(::tensorflow::boosted_trees::learner::AveragingConfigDefaultTypeInternal, average_last_percent_trees_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::AveragingConfig, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig, dropout_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig, probability_of_skipping_dropout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig, learning_rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearnerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearnerConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearnerConfig, num_classes_),
  offsetof(::tensorflow::boosted_trees::learner::LearnerConfigDefaultTypeInternal, feature_fraction_per_tree_),
  offsetof(::tensorflow::boosted_trees::learner::LearnerConfigDefaultTypeInternal, feature_fraction_per_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearnerConfig, regularization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearnerConfig, constraints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearnerConfig, pruning_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearnerConfig, growing_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearnerConfig, learning_rate_tuner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearnerConfig, multi_class_strategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearnerConfig, averaging_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::learner::LearnerConfig, feature_fraction_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::boosted_trees::learner::TreeRegularizationConfig)},
  { 8, -1, sizeof(::tensorflow::boosted_trees::learner::TreeConstraintsConfig)},
  { 16, -1, sizeof(::tensorflow::boosted_trees::learner::LearningRateConfig)},
  { 25, -1, sizeof(::tensorflow::boosted_trees::learner::LearningRateFixedConfig)},
  { 31, -1, sizeof(::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig)},
  { 38, -1, sizeof(::tensorflow::boosted_trees::learner::AveragingConfig)},
  { 46, -1, sizeof(::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig)},
  { 54, -1, sizeof(::tensorflow::boosted_trees::learner::LearnerConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::learner::_TreeRegularizationConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::learner::_TreeConstraintsConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::learner::_LearningRateConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::learner::_LearningRateFixedConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::learner::_LearningRateLineSearchConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::learner::_AveragingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::learner::_LearningRateDropoutDrivenConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::learner::_LearnerConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/contrib/boosted_trees/proto/learner.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n4tensorflow/contrib/boosted_trees/proto"
      "/learner.proto\022 tensorflow.boosted_trees"
      ".learner\"K\n\030TreeRegularizationConfig\022\n\n\002"
      "l1\030\001 \001(\002\022\n\n\002l2\030\002 \001(\002\022\027\n\017tree_complexity\030"
      "\003 \001(\002\"v\n\025TreeConstraintsConfig\022\026\n\016max_tr"
      "ee_depth\030\001 \001(\r\022\027\n\017min_node_weight\030\002 \001(\002\022"
      ",\n$max_number_of_unique_feature_columns\030"
      "\003 \001(\003\"\226\002\n\022LearningRateConfig\022J\n\005fixed\030\001 "
      "\001(\01329.tensorflow.boosted_trees.learner.L"
      "earningRateFixedConfigH\000\022T\n\007dropout\030\002 \001("
      "\0132A.tensorflow.boosted_trees.learner.Lea"
      "rningRateDropoutDrivenConfigH\000\022U\n\013line_s"
      "earch\030\003 \001(\0132>.tensorflow.boosted_trees.l"
      "earner.LearningRateLineSearchConfigH\000B\007\n"
      "\005tuner\"0\n\027LearningRateFixedConfig\022\025\n\rlea"
      "rning_rate\030\001 \001(\002\"L\n\034LearningRateLineSear"
      "chConfig\022\031\n\021max_learning_rate\030\001 \001(\002\022\021\n\tn"
      "um_steps\030\002 \001(\005\"a\n\017AveragingConfig\022\036\n\024ave"
      "rage_last_n_trees\030\001 \001(\002H\000\022$\n\032average_las"
      "t_percent_trees\030\002 \001(\002H\000B\010\n\006config\"~\n\037Lea"
      "rningRateDropoutDrivenConfig\022\033\n\023dropout_"
      "probability\030\001 \001(\002\022\'\n\037probability_of_skip"
      "ping_dropout\030\002 \001(\002\022\025\n\rlearning_rate\030\003 \001("
      "\002\"\342\007\n\rLearnerConfig\022\023\n\013num_classes\030\001 \001(\r"
      "\022#\n\031feature_fraction_per_tree\030\002 \001(\002H\000\022$\n"
      "\032feature_fraction_per_level\030\003 \001(\002H\000\022R\n\016r"
      "egularization\030\004 \001(\0132:.tensorflow.boosted"
      "_trees.learner.TreeRegularizationConfig\022"
      "L\n\013constraints\030\005 \001(\01327.tensorflow.booste"
      "d_trees.learner.TreeConstraintsConfig\022Q\n"
      "\014pruning_mode\030\010 \001(\0162;.tensorflow.boosted"
      "_trees.learner.LearnerConfig.PruningMode"
      "\022Q\n\014growing_mode\030\t \001(\0162;.tensorflow.boos"
      "ted_trees.learner.LearnerConfig.GrowingM"
      "ode\022Q\n\023learning_rate_tuner\030\006 \001(\01324.tenso"
      "rflow.boosted_trees.learner.LearningRate"
      "Config\022`\n\024multi_class_strategy\030\n \001(\0162B.t"
      "ensorflow.boosted_trees.learner.LearnerC"
      "onfig.MultiClassStrategy\022K\n\020averaging_co"
      "nfig\030\013 \001(\01321.tensorflow.boosted_trees.le"
      "arner.AveragingConfig\"J\n\013PruningMode\022\034\n\030"
      "PRUNING_MODE_UNSPECIFIED\020\000\022\r\n\tPRE_PRUNE\020"
      "\001\022\016\n\nPOST_PRUNE\020\002\"O\n\013GrowingMode\022\034\n\030GROW"
      "ING_MODE_UNSPECIFIED\020\000\022\016\n\nWHOLE_TREE\020\001\022\022"
      "\n\016LAYER_BY_LAYER\020\002\"v\n\022MultiClassStrategy"
      "\022$\n MULTI_CLASS_STRATEGY_UNSPECIFIED\020\000\022\022"
      "\n\016TREE_PER_CLASS\020\001\022\020\n\014FULL_HESSIAN\020\002\022\024\n\020"
      "DIAGONAL_HESSIAN\020\003B\022\n\020feature_fractionB\003"
      "\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1931);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/contrib/boosted_trees/proto/learner.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto
namespace tensorflow {
namespace boosted_trees {
namespace learner {
const ::google::protobuf::EnumDescriptor* LearnerConfig_PruningMode_descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_enum_descriptors[0];
}
bool LearnerConfig_PruningMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LearnerConfig_PruningMode LearnerConfig::PRUNING_MODE_UNSPECIFIED;
const LearnerConfig_PruningMode LearnerConfig::PRE_PRUNE;
const LearnerConfig_PruningMode LearnerConfig::POST_PRUNE;
const LearnerConfig_PruningMode LearnerConfig::PruningMode_MIN;
const LearnerConfig_PruningMode LearnerConfig::PruningMode_MAX;
const int LearnerConfig::PruningMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LearnerConfig_GrowingMode_descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_enum_descriptors[1];
}
bool LearnerConfig_GrowingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LearnerConfig_GrowingMode LearnerConfig::GROWING_MODE_UNSPECIFIED;
const LearnerConfig_GrowingMode LearnerConfig::WHOLE_TREE;
const LearnerConfig_GrowingMode LearnerConfig::LAYER_BY_LAYER;
const LearnerConfig_GrowingMode LearnerConfig::GrowingMode_MIN;
const LearnerConfig_GrowingMode LearnerConfig::GrowingMode_MAX;
const int LearnerConfig::GrowingMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LearnerConfig_MultiClassStrategy_descriptor() {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_enum_descriptors[2];
}
bool LearnerConfig_MultiClassStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LearnerConfig_MultiClassStrategy LearnerConfig::MULTI_CLASS_STRATEGY_UNSPECIFIED;
const LearnerConfig_MultiClassStrategy LearnerConfig::TREE_PER_CLASS;
const LearnerConfig_MultiClassStrategy LearnerConfig::FULL_HESSIAN;
const LearnerConfig_MultiClassStrategy LearnerConfig::DIAGONAL_HESSIAN;
const LearnerConfig_MultiClassStrategy LearnerConfig::MultiClassStrategy_MIN;
const LearnerConfig_MultiClassStrategy LearnerConfig::MultiClassStrategy_MAX;
const int LearnerConfig::MultiClassStrategy_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TreeRegularizationConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeRegularizationConfig::kL1FieldNumber;
const int TreeRegularizationConfig::kL2FieldNumber;
const int TreeRegularizationConfig::kTreeComplexityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeRegularizationConfig::TreeRegularizationConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsTreeRegularizationConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
}
TreeRegularizationConfig::TreeRegularizationConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsTreeRegularizationConfig();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
}
TreeRegularizationConfig::TreeRegularizationConfig(const TreeRegularizationConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&l1_, &from.l1_,
    static_cast<size_t>(reinterpret_cast<char*>(&tree_complexity_) -
    reinterpret_cast<char*>(&l1_)) + sizeof(tree_complexity_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
}

void TreeRegularizationConfig::SharedCtor() {
  ::memset(&l1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tree_complexity_) -
      reinterpret_cast<char*>(&l1_)) + sizeof(tree_complexity_));
  _cached_size_ = 0;
}

TreeRegularizationConfig::~TreeRegularizationConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  SharedDtor();
}

void TreeRegularizationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void TreeRegularizationConfig::ArenaDtor(void* object) {
  TreeRegularizationConfig* _this = reinterpret_cast< TreeRegularizationConfig* >(object);
  (void)_this;
}
void TreeRegularizationConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TreeRegularizationConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeRegularizationConfig::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TreeRegularizationConfig& TreeRegularizationConfig::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsTreeRegularizationConfig();
  return *internal_default_instance();
}


void TreeRegularizationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&l1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tree_complexity_) -
      reinterpret_cast<char*>(&l1_)) + sizeof(tree_complexity_));
  _internal_metadata_.Clear();
}

bool TreeRegularizationConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float l1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float l2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tree_complexity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tree_complexity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  return false;
#undef DO_
}

void TreeRegularizationConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float l1 = 1;
  if (this->l1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->l1(), output);
  }

  // float l2 = 2;
  if (this->l2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->l2(), output);
  }

  // float tree_complexity = 3;
  if (this->tree_complexity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->tree_complexity(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
}

::google::protobuf::uint8* TreeRegularizationConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float l1 = 1;
  if (this->l1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->l1(), target);
  }

  // float l2 = 2;
  if (this->l2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->l2(), target);
  }

  // float tree_complexity = 3;
  if (this->tree_complexity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->tree_complexity(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  return target;
}

size_t TreeRegularizationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float l1 = 1;
  if (this->l1() != 0) {
    total_size += 1 + 4;
  }

  // float l2 = 2;
  if (this->l2() != 0) {
    total_size += 1 + 4;
  }

  // float tree_complexity = 3;
  if (this->tree_complexity() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeRegularizationConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeRegularizationConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeRegularizationConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
    MergeFrom(*source);
  }
}

void TreeRegularizationConfig::MergeFrom(const TreeRegularizationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.l1() != 0) {
    set_l1(from.l1());
  }
  if (from.l2() != 0) {
    set_l2(from.l2());
  }
  if (from.tree_complexity() != 0) {
    set_tree_complexity(from.tree_complexity());
  }
}

void TreeRegularizationConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeRegularizationConfig::CopyFrom(const TreeRegularizationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.TreeRegularizationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeRegularizationConfig::IsInitialized() const {
  return true;
}

void TreeRegularizationConfig::Swap(TreeRegularizationConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TreeRegularizationConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TreeRegularizationConfig::UnsafeArenaSwap(TreeRegularizationConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TreeRegularizationConfig::InternalSwap(TreeRegularizationConfig* other) {
  using std::swap;
  swap(l1_, other->l1_);
  swap(l2_, other->l2_);
  swap(tree_complexity_, other->tree_complexity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeRegularizationConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TreeConstraintsConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeConstraintsConfig::kMaxTreeDepthFieldNumber;
const int TreeConstraintsConfig::kMinNodeWeightFieldNumber;
const int TreeConstraintsConfig::kMaxNumberOfUniqueFeatureColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeConstraintsConfig::TreeConstraintsConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsTreeConstraintsConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
}
TreeConstraintsConfig::TreeConstraintsConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsTreeConstraintsConfig();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
}
TreeConstraintsConfig::TreeConstraintsConfig(const TreeConstraintsConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_tree_depth_, &from.max_tree_depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_unique_feature_columns_) -
    reinterpret_cast<char*>(&max_tree_depth_)) + sizeof(max_number_of_unique_feature_columns_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
}

void TreeConstraintsConfig::SharedCtor() {
  ::memset(&max_tree_depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_number_of_unique_feature_columns_) -
      reinterpret_cast<char*>(&max_tree_depth_)) + sizeof(max_number_of_unique_feature_columns_));
  _cached_size_ = 0;
}

TreeConstraintsConfig::~TreeConstraintsConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  SharedDtor();
}

void TreeConstraintsConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void TreeConstraintsConfig::ArenaDtor(void* object) {
  TreeConstraintsConfig* _this = reinterpret_cast< TreeConstraintsConfig* >(object);
  (void)_this;
}
void TreeConstraintsConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TreeConstraintsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeConstraintsConfig::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TreeConstraintsConfig& TreeConstraintsConfig::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsTreeConstraintsConfig();
  return *internal_default_instance();
}


void TreeConstraintsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_tree_depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_number_of_unique_feature_columns_) -
      reinterpret_cast<char*>(&max_tree_depth_)) + sizeof(max_number_of_unique_feature_columns_));
  _internal_metadata_.Clear();
}

bool TreeConstraintsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 max_tree_depth = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_tree_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_node_weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_node_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_number_of_unique_feature_columns = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_number_of_unique_feature_columns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  return false;
#undef DO_
}

void TreeConstraintsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_tree_depth = 1;
  if (this->max_tree_depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_tree_depth(), output);
  }

  // float min_node_weight = 2;
  if (this->min_node_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_node_weight(), output);
  }

  // int64 max_number_of_unique_feature_columns = 3;
  if (this->max_number_of_unique_feature_columns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->max_number_of_unique_feature_columns(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
}

::google::protobuf::uint8* TreeConstraintsConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_tree_depth = 1;
  if (this->max_tree_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_tree_depth(), target);
  }

  // float min_node_weight = 2;
  if (this->min_node_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_node_weight(), target);
  }

  // int64 max_number_of_unique_feature_columns = 3;
  if (this->max_number_of_unique_feature_columns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->max_number_of_unique_feature_columns(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  return target;
}

size_t TreeConstraintsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 max_tree_depth = 1;
  if (this->max_tree_depth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_tree_depth());
  }

  // float min_node_weight = 2;
  if (this->min_node_weight() != 0) {
    total_size += 1 + 4;
  }

  // int64 max_number_of_unique_feature_columns = 3;
  if (this->max_number_of_unique_feature_columns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_number_of_unique_feature_columns());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeConstraintsConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeConstraintsConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeConstraintsConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
    MergeFrom(*source);
  }
}

void TreeConstraintsConfig::MergeFrom(const TreeConstraintsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_tree_depth() != 0) {
    set_max_tree_depth(from.max_tree_depth());
  }
  if (from.min_node_weight() != 0) {
    set_min_node_weight(from.min_node_weight());
  }
  if (from.max_number_of_unique_feature_columns() != 0) {
    set_max_number_of_unique_feature_columns(from.max_number_of_unique_feature_columns());
  }
}

void TreeConstraintsConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeConstraintsConfig::CopyFrom(const TreeConstraintsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.TreeConstraintsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeConstraintsConfig::IsInitialized() const {
  return true;
}

void TreeConstraintsConfig::Swap(TreeConstraintsConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TreeConstraintsConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TreeConstraintsConfig::UnsafeArenaSwap(TreeConstraintsConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TreeConstraintsConfig::InternalSwap(TreeConstraintsConfig* other) {
  using std::swap;
  swap(max_tree_depth_, other->max_tree_depth_);
  swap(min_node_weight_, other->min_node_weight_);
  swap(max_number_of_unique_feature_columns_, other->max_number_of_unique_feature_columns_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeConstraintsConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LearningRateConfig::InitAsDefaultInstance() {
  ::tensorflow::boosted_trees::learner::_LearningRateConfig_default_instance_.fixed_ = const_cast< ::tensorflow::boosted_trees::learner::LearningRateFixedConfig*>(
      ::tensorflow::boosted_trees::learner::LearningRateFixedConfig::internal_default_instance());
  ::tensorflow::boosted_trees::learner::_LearningRateConfig_default_instance_.dropout_ = const_cast< ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig*>(
      ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig::internal_default_instance());
  ::tensorflow::boosted_trees::learner::_LearningRateConfig_default_instance_.line_search_ = const_cast< ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig*>(
      ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig::internal_default_instance());
}
void LearningRateConfig::set_allocated_fixed(::tensorflow::boosted_trees::learner::LearningRateFixedConfig* fixed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_tuner();
  if (fixed) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(fixed);
    if (message_arena != submessage_arena) {
      fixed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fixed, submessage_arena);
    }
    set_has_fixed();
    tuner_.fixed_ = fixed;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.LearningRateConfig.fixed)
}
void LearningRateConfig::set_allocated_dropout(::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig* dropout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_tuner();
  if (dropout) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(dropout);
    if (message_arena != submessage_arena) {
      dropout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dropout, submessage_arena);
    }
    set_has_dropout();
    tuner_.dropout_ = dropout;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.LearningRateConfig.dropout)
}
void LearningRateConfig::set_allocated_line_search(::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig* line_search) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_tuner();
  if (line_search) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(line_search);
    if (message_arena != submessage_arena) {
      line_search = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, line_search, submessage_arena);
    }
    set_has_line_search();
    tuner_.line_search_ = line_search;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.LearningRateConfig.line_search)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningRateConfig::kFixedFieldNumber;
const int LearningRateConfig::kDropoutFieldNumber;
const int LearningRateConfig::kLineSearchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningRateConfig::LearningRateConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.LearningRateConfig)
}
LearningRateConfig::LearningRateConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateConfig();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.LearningRateConfig)
}
LearningRateConfig::LearningRateConfig(const LearningRateConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_tuner();
  switch (from.tuner_case()) {
    case kFixed: {
      mutable_fixed()->::tensorflow::boosted_trees::learner::LearningRateFixedConfig::MergeFrom(from.fixed());
      break;
    }
    case kDropout: {
      mutable_dropout()->::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig::MergeFrom(from.dropout());
      break;
    }
    case kLineSearch: {
      mutable_line_search()->::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig::MergeFrom(from.line_search());
      break;
    }
    case TUNER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.LearningRateConfig)
}

void LearningRateConfig::SharedCtor() {
  clear_has_tuner();
  _cached_size_ = 0;
}

LearningRateConfig::~LearningRateConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.LearningRateConfig)
  SharedDtor();
}

void LearningRateConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_tuner()) {
    clear_tuner();
  }
}

void LearningRateConfig::ArenaDtor(void* object) {
  LearningRateConfig* _this = reinterpret_cast< LearningRateConfig* >(object);
  (void)_this;
}
void LearningRateConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LearningRateConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearningRateConfig::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LearningRateConfig& LearningRateConfig::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateConfig();
  return *internal_default_instance();
}


void LearningRateConfig::clear_tuner() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  switch (tuner_case()) {
    case kFixed: {
      if (GetArenaNoVirtual() == NULL) {
        delete tuner_.fixed_;
      }
      break;
    }
    case kDropout: {
      if (GetArenaNoVirtual() == NULL) {
        delete tuner_.dropout_;
      }
      break;
    }
    case kLineSearch: {
      if (GetArenaNoVirtual() == NULL) {
        delete tuner_.line_search_;
      }
      break;
    }
    case TUNER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TUNER_NOT_SET;
}


void LearningRateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_tuner();
  _internal_metadata_.Clear();
}

bool LearningRateConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.boosted_trees.learner.LearningRateFixedConfig fixed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig dropout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dropout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.LearningRateLineSearchConfig line_search = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_line_search()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.LearningRateConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.LearningRateConfig)
  return false;
#undef DO_
}

void LearningRateConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.boosted_trees.learner.LearningRateFixedConfig fixed = 1;
  if (has_fixed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *tuner_.fixed_, output);
  }

  // .tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig dropout = 2;
  if (has_dropout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *tuner_.dropout_, output);
  }

  // .tensorflow.boosted_trees.learner.LearningRateLineSearchConfig line_search = 3;
  if (has_line_search()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *tuner_.line_search_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.LearningRateConfig)
}

::google::protobuf::uint8* LearningRateConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.boosted_trees.learner.LearningRateFixedConfig fixed = 1;
  if (has_fixed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *tuner_.fixed_, deterministic, target);
  }

  // .tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig dropout = 2;
  if (has_dropout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *tuner_.dropout_, deterministic, target);
  }

  // .tensorflow.boosted_trees.learner.LearningRateLineSearchConfig line_search = 3;
  if (has_line_search()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *tuner_.line_search_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.LearningRateConfig)
  return target;
}

size_t LearningRateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (tuner_case()) {
    // .tensorflow.boosted_trees.learner.LearningRateFixedConfig fixed = 1;
    case kFixed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tuner_.fixed_);
      break;
    }
    // .tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig dropout = 2;
    case kDropout: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tuner_.dropout_);
      break;
    }
    // .tensorflow.boosted_trees.learner.LearningRateLineSearchConfig line_search = 3;
    case kLineSearch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tuner_.line_search_);
      break;
    }
    case TUNER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearningRateConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningRateConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningRateConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.LearningRateConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.LearningRateConfig)
    MergeFrom(*source);
  }
}

void LearningRateConfig::MergeFrom(const LearningRateConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.tuner_case()) {
    case kFixed: {
      mutable_fixed()->::tensorflow::boosted_trees::learner::LearningRateFixedConfig::MergeFrom(from.fixed());
      break;
    }
    case kDropout: {
      mutable_dropout()->::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig::MergeFrom(from.dropout());
      break;
    }
    case kLineSearch: {
      mutable_line_search()->::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig::MergeFrom(from.line_search());
      break;
    }
    case TUNER_NOT_SET: {
      break;
    }
  }
}

void LearningRateConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningRateConfig::CopyFrom(const LearningRateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.LearningRateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningRateConfig::IsInitialized() const {
  return true;
}

void LearningRateConfig::Swap(LearningRateConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LearningRateConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LearningRateConfig::UnsafeArenaSwap(LearningRateConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LearningRateConfig::InternalSwap(LearningRateConfig* other) {
  using std::swap;
  swap(tuner_, other->tuner_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LearningRateConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LearningRateFixedConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningRateFixedConfig::kLearningRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningRateFixedConfig::LearningRateFixedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateFixedConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
}
LearningRateFixedConfig::LearningRateFixedConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateFixedConfig();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
}
LearningRateFixedConfig::LearningRateFixedConfig(const LearningRateFixedConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  learning_rate_ = from.learning_rate_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
}

void LearningRateFixedConfig::SharedCtor() {
  learning_rate_ = 0;
  _cached_size_ = 0;
}

LearningRateFixedConfig::~LearningRateFixedConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  SharedDtor();
}

void LearningRateFixedConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void LearningRateFixedConfig::ArenaDtor(void* object) {
  LearningRateFixedConfig* _this = reinterpret_cast< LearningRateFixedConfig* >(object);
  (void)_this;
}
void LearningRateFixedConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LearningRateFixedConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearningRateFixedConfig::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LearningRateFixedConfig& LearningRateFixedConfig::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateFixedConfig();
  return *internal_default_instance();
}


void LearningRateFixedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  learning_rate_ = 0;
  _internal_metadata_.Clear();
}

bool LearningRateFixedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float learning_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  return false;
#undef DO_
}

void LearningRateFixedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->learning_rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
}

::google::protobuf::uint8* LearningRateFixedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->learning_rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  return target;
}

size_t LearningRateFixedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearningRateFixedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningRateFixedConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningRateFixedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
    MergeFrom(*source);
  }
}

void LearningRateFixedConfig::MergeFrom(const LearningRateFixedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.learning_rate() != 0) {
    set_learning_rate(from.learning_rate());
  }
}

void LearningRateFixedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningRateFixedConfig::CopyFrom(const LearningRateFixedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.LearningRateFixedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningRateFixedConfig::IsInitialized() const {
  return true;
}

void LearningRateFixedConfig::Swap(LearningRateFixedConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LearningRateFixedConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LearningRateFixedConfig::UnsafeArenaSwap(LearningRateFixedConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LearningRateFixedConfig::InternalSwap(LearningRateFixedConfig* other) {
  using std::swap;
  swap(learning_rate_, other->learning_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LearningRateFixedConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LearningRateLineSearchConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningRateLineSearchConfig::kMaxLearningRateFieldNumber;
const int LearningRateLineSearchConfig::kNumStepsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningRateLineSearchConfig::LearningRateLineSearchConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateLineSearchConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
}
LearningRateLineSearchConfig::LearningRateLineSearchConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateLineSearchConfig();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
}
LearningRateLineSearchConfig::LearningRateLineSearchConfig(const LearningRateLineSearchConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_learning_rate_, &from.max_learning_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_steps_) -
    reinterpret_cast<char*>(&max_learning_rate_)) + sizeof(num_steps_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
}

void LearningRateLineSearchConfig::SharedCtor() {
  ::memset(&max_learning_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_steps_) -
      reinterpret_cast<char*>(&max_learning_rate_)) + sizeof(num_steps_));
  _cached_size_ = 0;
}

LearningRateLineSearchConfig::~LearningRateLineSearchConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  SharedDtor();
}

void LearningRateLineSearchConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void LearningRateLineSearchConfig::ArenaDtor(void* object) {
  LearningRateLineSearchConfig* _this = reinterpret_cast< LearningRateLineSearchConfig* >(object);
  (void)_this;
}
void LearningRateLineSearchConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LearningRateLineSearchConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearningRateLineSearchConfig::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LearningRateLineSearchConfig& LearningRateLineSearchConfig::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateLineSearchConfig();
  return *internal_default_instance();
}


void LearningRateLineSearchConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_learning_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_steps_) -
      reinterpret_cast<char*>(&max_learning_rate_)) + sizeof(num_steps_));
  _internal_metadata_.Clear();
}

bool LearningRateLineSearchConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float max_learning_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_steps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  return false;
#undef DO_
}

void LearningRateLineSearchConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float max_learning_rate = 1;
  if (this->max_learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->max_learning_rate(), output);
  }

  // int32 num_steps = 2;
  if (this->num_steps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_steps(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
}

::google::protobuf::uint8* LearningRateLineSearchConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float max_learning_rate = 1;
  if (this->max_learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->max_learning_rate(), target);
  }

  // int32 num_steps = 2;
  if (this->num_steps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_steps(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  return target;
}

size_t LearningRateLineSearchConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float max_learning_rate = 1;
  if (this->max_learning_rate() != 0) {
    total_size += 1 + 4;
  }

  // int32 num_steps = 2;
  if (this->num_steps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_steps());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearningRateLineSearchConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningRateLineSearchConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningRateLineSearchConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
    MergeFrom(*source);
  }
}

void LearningRateLineSearchConfig::MergeFrom(const LearningRateLineSearchConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_learning_rate() != 0) {
    set_max_learning_rate(from.max_learning_rate());
  }
  if (from.num_steps() != 0) {
    set_num_steps(from.num_steps());
  }
}

void LearningRateLineSearchConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningRateLineSearchConfig::CopyFrom(const LearningRateLineSearchConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.LearningRateLineSearchConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningRateLineSearchConfig::IsInitialized() const {
  return true;
}

void LearningRateLineSearchConfig::Swap(LearningRateLineSearchConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LearningRateLineSearchConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LearningRateLineSearchConfig::UnsafeArenaSwap(LearningRateLineSearchConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LearningRateLineSearchConfig::InternalSwap(LearningRateLineSearchConfig* other) {
  using std::swap;
  swap(max_learning_rate_, other->max_learning_rate_);
  swap(num_steps_, other->num_steps_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LearningRateLineSearchConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AveragingConfig::InitAsDefaultInstance() {
  ::tensorflow::boosted_trees::learner::_AveragingConfig_default_instance_.average_last_n_trees_ = 0;
  ::tensorflow::boosted_trees::learner::_AveragingConfig_default_instance_.average_last_percent_trees_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AveragingConfig::kAverageLastNTreesFieldNumber;
const int AveragingConfig::kAverageLastPercentTreesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AveragingConfig::AveragingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsAveragingConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.AveragingConfig)
}
AveragingConfig::AveragingConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsAveragingConfig();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.AveragingConfig)
}
AveragingConfig::AveragingConfig(const AveragingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_config();
  switch (from.config_case()) {
    case kAverageLastNTrees: {
      set_average_last_n_trees(from.average_last_n_trees());
      break;
    }
    case kAverageLastPercentTrees: {
      set_average_last_percent_trees(from.average_last_percent_trees());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.AveragingConfig)
}

void AveragingConfig::SharedCtor() {
  clear_has_config();
  _cached_size_ = 0;
}

AveragingConfig::~AveragingConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.AveragingConfig)
  SharedDtor();
}

void AveragingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_config()) {
    clear_config();
  }
}

void AveragingConfig::ArenaDtor(void* object) {
  AveragingConfig* _this = reinterpret_cast< AveragingConfig* >(object);
  (void)_this;
}
void AveragingConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AveragingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AveragingConfig::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AveragingConfig& AveragingConfig::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsAveragingConfig();
  return *internal_default_instance();
}


void AveragingConfig::clear_config() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.boosted_trees.learner.AveragingConfig)
  switch (config_case()) {
    case kAverageLastNTrees: {
      // No need to clear
      break;
    }
    case kAverageLastPercentTrees: {
      // No need to clear
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIG_NOT_SET;
}


void AveragingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.AveragingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_config();
  _internal_metadata_.Clear();
}

bool AveragingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.AveragingConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float average_last_n_trees = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          clear_config();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &config_.average_last_n_trees_)));
          set_has_average_last_n_trees();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float average_last_percent_trees = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          clear_config();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &config_.average_last_percent_trees_)));
          set_has_average_last_percent_trees();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.AveragingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.AveragingConfig)
  return false;
#undef DO_
}

void AveragingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.AveragingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float average_last_n_trees = 1;
  if (has_average_last_n_trees()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->average_last_n_trees(), output);
  }

  // float average_last_percent_trees = 2;
  if (has_average_last_percent_trees()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->average_last_percent_trees(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.AveragingConfig)
}

::google::protobuf::uint8* AveragingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.AveragingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float average_last_n_trees = 1;
  if (has_average_last_n_trees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->average_last_n_trees(), target);
  }

  // float average_last_percent_trees = 2;
  if (has_average_last_percent_trees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->average_last_percent_trees(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.AveragingConfig)
  return target;
}

size_t AveragingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.AveragingConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (config_case()) {
    // float average_last_n_trees = 1;
    case kAverageLastNTrees: {
      total_size += 1 + 4;
      break;
    }
    // float average_last_percent_trees = 2;
    case kAverageLastPercentTrees: {
      total_size += 1 + 4;
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AveragingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.AveragingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AveragingConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AveragingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.AveragingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.AveragingConfig)
    MergeFrom(*source);
  }
}

void AveragingConfig::MergeFrom(const AveragingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.AveragingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.config_case()) {
    case kAverageLastNTrees: {
      set_average_last_n_trees(from.average_last_n_trees());
      break;
    }
    case kAverageLastPercentTrees: {
      set_average_last_percent_trees(from.average_last_percent_trees());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
}

void AveragingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.AveragingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AveragingConfig::CopyFrom(const AveragingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.AveragingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AveragingConfig::IsInitialized() const {
  return true;
}

void AveragingConfig::Swap(AveragingConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AveragingConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AveragingConfig::UnsafeArenaSwap(AveragingConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AveragingConfig::InternalSwap(AveragingConfig* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AveragingConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LearningRateDropoutDrivenConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningRateDropoutDrivenConfig::kDropoutProbabilityFieldNumber;
const int LearningRateDropoutDrivenConfig::kProbabilityOfSkippingDropoutFieldNumber;
const int LearningRateDropoutDrivenConfig::kLearningRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningRateDropoutDrivenConfig::LearningRateDropoutDrivenConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateDropoutDrivenConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
}
LearningRateDropoutDrivenConfig::LearningRateDropoutDrivenConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateDropoutDrivenConfig();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
}
LearningRateDropoutDrivenConfig::LearningRateDropoutDrivenConfig(const LearningRateDropoutDrivenConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dropout_probability_, &from.dropout_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&learning_rate_) -
    reinterpret_cast<char*>(&dropout_probability_)) + sizeof(learning_rate_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
}

void LearningRateDropoutDrivenConfig::SharedCtor() {
  ::memset(&dropout_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&learning_rate_) -
      reinterpret_cast<char*>(&dropout_probability_)) + sizeof(learning_rate_));
  _cached_size_ = 0;
}

LearningRateDropoutDrivenConfig::~LearningRateDropoutDrivenConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  SharedDtor();
}

void LearningRateDropoutDrivenConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void LearningRateDropoutDrivenConfig::ArenaDtor(void* object) {
  LearningRateDropoutDrivenConfig* _this = reinterpret_cast< LearningRateDropoutDrivenConfig* >(object);
  (void)_this;
}
void LearningRateDropoutDrivenConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LearningRateDropoutDrivenConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearningRateDropoutDrivenConfig::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LearningRateDropoutDrivenConfig& LearningRateDropoutDrivenConfig::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearningRateDropoutDrivenConfig();
  return *internal_default_instance();
}


void LearningRateDropoutDrivenConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dropout_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&learning_rate_) -
      reinterpret_cast<char*>(&dropout_probability_)) + sizeof(learning_rate_));
  _internal_metadata_.Clear();
}

bool LearningRateDropoutDrivenConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float dropout_probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float probability_of_skipping_dropout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_of_skipping_dropout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float learning_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  return false;
#undef DO_
}

void LearningRateDropoutDrivenConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float dropout_probability = 1;
  if (this->dropout_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dropout_probability(), output);
  }

  // float probability_of_skipping_dropout = 2;
  if (this->probability_of_skipping_dropout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->probability_of_skipping_dropout(), output);
  }

  // float learning_rate = 3;
  if (this->learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->learning_rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
}

::google::protobuf::uint8* LearningRateDropoutDrivenConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float dropout_probability = 1;
  if (this->dropout_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dropout_probability(), target);
  }

  // float probability_of_skipping_dropout = 2;
  if (this->probability_of_skipping_dropout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->probability_of_skipping_dropout(), target);
  }

  // float learning_rate = 3;
  if (this->learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->learning_rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  return target;
}

size_t LearningRateDropoutDrivenConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float dropout_probability = 1;
  if (this->dropout_probability() != 0) {
    total_size += 1 + 4;
  }

  // float probability_of_skipping_dropout = 2;
  if (this->probability_of_skipping_dropout() != 0) {
    total_size += 1 + 4;
  }

  // float learning_rate = 3;
  if (this->learning_rate() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearningRateDropoutDrivenConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningRateDropoutDrivenConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningRateDropoutDrivenConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
    MergeFrom(*source);
  }
}

void LearningRateDropoutDrivenConfig::MergeFrom(const LearningRateDropoutDrivenConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dropout_probability() != 0) {
    set_dropout_probability(from.dropout_probability());
  }
  if (from.probability_of_skipping_dropout() != 0) {
    set_probability_of_skipping_dropout(from.probability_of_skipping_dropout());
  }
  if (from.learning_rate() != 0) {
    set_learning_rate(from.learning_rate());
  }
}

void LearningRateDropoutDrivenConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningRateDropoutDrivenConfig::CopyFrom(const LearningRateDropoutDrivenConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.LearningRateDropoutDrivenConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningRateDropoutDrivenConfig::IsInitialized() const {
  return true;
}

void LearningRateDropoutDrivenConfig::Swap(LearningRateDropoutDrivenConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LearningRateDropoutDrivenConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LearningRateDropoutDrivenConfig::UnsafeArenaSwap(LearningRateDropoutDrivenConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LearningRateDropoutDrivenConfig::InternalSwap(LearningRateDropoutDrivenConfig* other) {
  using std::swap;
  swap(dropout_probability_, other->dropout_probability_);
  swap(probability_of_skipping_dropout_, other->probability_of_skipping_dropout_);
  swap(learning_rate_, other->learning_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LearningRateDropoutDrivenConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LearnerConfig::InitAsDefaultInstance() {
  ::tensorflow::boosted_trees::learner::_LearnerConfig_default_instance_.feature_fraction_per_tree_ = 0;
  ::tensorflow::boosted_trees::learner::_LearnerConfig_default_instance_.feature_fraction_per_level_ = 0;
  ::tensorflow::boosted_trees::learner::_LearnerConfig_default_instance_._instance.get_mutable()->regularization_ = const_cast< ::tensorflow::boosted_trees::learner::TreeRegularizationConfig*>(
      ::tensorflow::boosted_trees::learner::TreeRegularizationConfig::internal_default_instance());
  ::tensorflow::boosted_trees::learner::_LearnerConfig_default_instance_._instance.get_mutable()->constraints_ = const_cast< ::tensorflow::boosted_trees::learner::TreeConstraintsConfig*>(
      ::tensorflow::boosted_trees::learner::TreeConstraintsConfig::internal_default_instance());
  ::tensorflow::boosted_trees::learner::_LearnerConfig_default_instance_._instance.get_mutable()->learning_rate_tuner_ = const_cast< ::tensorflow::boosted_trees::learner::LearningRateConfig*>(
      ::tensorflow::boosted_trees::learner::LearningRateConfig::internal_default_instance());
  ::tensorflow::boosted_trees::learner::_LearnerConfig_default_instance_._instance.get_mutable()->averaging_config_ = const_cast< ::tensorflow::boosted_trees::learner::AveragingConfig*>(
      ::tensorflow::boosted_trees::learner::AveragingConfig::internal_default_instance());
}
void LearnerConfig::unsafe_arena_set_allocated_regularization(
    ::tensorflow::boosted_trees::learner::TreeRegularizationConfig* regularization) {
  if (GetArenaNoVirtual() == NULL) {
    delete regularization_;
  }
  regularization_ = regularization;
  if (regularization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.learner.LearnerConfig.regularization)
}
void LearnerConfig::unsafe_arena_set_allocated_constraints(
    ::tensorflow::boosted_trees::learner::TreeConstraintsConfig* constraints) {
  if (GetArenaNoVirtual() == NULL) {
    delete constraints_;
  }
  constraints_ = constraints;
  if (constraints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.learner.LearnerConfig.constraints)
}
void LearnerConfig::unsafe_arena_set_allocated_learning_rate_tuner(
    ::tensorflow::boosted_trees::learner::LearningRateConfig* learning_rate_tuner) {
  if (GetArenaNoVirtual() == NULL) {
    delete learning_rate_tuner_;
  }
  learning_rate_tuner_ = learning_rate_tuner;
  if (learning_rate_tuner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.learner.LearnerConfig.learning_rate_tuner)
}
void LearnerConfig::unsafe_arena_set_allocated_averaging_config(
    ::tensorflow::boosted_trees::learner::AveragingConfig* averaging_config) {
  if (GetArenaNoVirtual() == NULL) {
    delete averaging_config_;
  }
  averaging_config_ = averaging_config;
  if (averaging_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.learner.LearnerConfig.averaging_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearnerConfig::kNumClassesFieldNumber;
const int LearnerConfig::kFeatureFractionPerTreeFieldNumber;
const int LearnerConfig::kFeatureFractionPerLevelFieldNumber;
const int LearnerConfig::kRegularizationFieldNumber;
const int LearnerConfig::kConstraintsFieldNumber;
const int LearnerConfig::kPruningModeFieldNumber;
const int LearnerConfig::kGrowingModeFieldNumber;
const int LearnerConfig::kLearningRateTunerFieldNumber;
const int LearnerConfig::kMultiClassStrategyFieldNumber;
const int LearnerConfig::kAveragingConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearnerConfig::LearnerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearnerConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.learner.LearnerConfig)
}
LearnerConfig::LearnerConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearnerConfig();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.learner.LearnerConfig)
}
LearnerConfig::LearnerConfig(const LearnerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_regularization()) {
    regularization_ = new ::tensorflow::boosted_trees::learner::TreeRegularizationConfig(*from.regularization_);
  } else {
    regularization_ = NULL;
  }
  if (from.has_constraints()) {
    constraints_ = new ::tensorflow::boosted_trees::learner::TreeConstraintsConfig(*from.constraints_);
  } else {
    constraints_ = NULL;
  }
  if (from.has_learning_rate_tuner()) {
    learning_rate_tuner_ = new ::tensorflow::boosted_trees::learner::LearningRateConfig(*from.learning_rate_tuner_);
  } else {
    learning_rate_tuner_ = NULL;
  }
  if (from.has_averaging_config()) {
    averaging_config_ = new ::tensorflow::boosted_trees::learner::AveragingConfig(*from.averaging_config_);
  } else {
    averaging_config_ = NULL;
  }
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&multi_class_strategy_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(multi_class_strategy_));
  clear_has_feature_fraction();
  switch (from.feature_fraction_case()) {
    case kFeatureFractionPerTree: {
      set_feature_fraction_per_tree(from.feature_fraction_per_tree());
      break;
    }
    case kFeatureFractionPerLevel: {
      set_feature_fraction_per_level(from.feature_fraction_per_level());
      break;
    }
    case FEATURE_FRACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.learner.LearnerConfig)
}

void LearnerConfig::SharedCtor() {
  ::memset(&regularization_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multi_class_strategy_) -
      reinterpret_cast<char*>(&regularization_)) + sizeof(multi_class_strategy_));
  clear_has_feature_fraction();
  _cached_size_ = 0;
}

LearnerConfig::~LearnerConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.learner.LearnerConfig)
  SharedDtor();
}

void LearnerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete regularization_;
  if (this != internal_default_instance()) delete constraints_;
  if (this != internal_default_instance()) delete learning_rate_tuner_;
  if (this != internal_default_instance()) delete averaging_config_;
  if (has_feature_fraction()) {
    clear_feature_fraction();
  }
}

void LearnerConfig::ArenaDtor(void* object) {
  LearnerConfig* _this = reinterpret_cast< LearnerConfig* >(object);
  (void)_this;
}
void LearnerConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LearnerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearnerConfig::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LearnerConfig& LearnerConfig::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::InitDefaultsLearnerConfig();
  return *internal_default_instance();
}


void LearnerConfig::clear_feature_fraction() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.boosted_trees.learner.LearnerConfig)
  switch (feature_fraction_case()) {
    case kFeatureFractionPerTree: {
      // No need to clear
      break;
    }
    case kFeatureFractionPerLevel: {
      // No need to clear
      break;
    }
    case FEATURE_FRACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FEATURE_FRACTION_NOT_SET;
}


void LearnerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.learner.LearnerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && regularization_ != NULL) {
    delete regularization_;
  }
  regularization_ = NULL;
  if (GetArenaNoVirtual() == NULL && constraints_ != NULL) {
    delete constraints_;
  }
  constraints_ = NULL;
  if (GetArenaNoVirtual() == NULL && learning_rate_tuner_ != NULL) {
    delete learning_rate_tuner_;
  }
  learning_rate_tuner_ = NULL;
  if (GetArenaNoVirtual() == NULL && averaging_config_ != NULL) {
    delete averaging_config_;
  }
  averaging_config_ = NULL;
  ::memset(&num_classes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multi_class_strategy_) -
      reinterpret_cast<char*>(&num_classes_)) + sizeof(multi_class_strategy_));
  clear_feature_fraction();
  _internal_metadata_.Clear();
}

bool LearnerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.learner.LearnerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 num_classes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float feature_fraction_per_tree = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          clear_feature_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feature_fraction_.feature_fraction_per_tree_)));
          set_has_feature_fraction_per_tree();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float feature_fraction_per_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          clear_feature_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feature_fraction_.feature_fraction_per_level_)));
          set_has_feature_fraction_per_level();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.TreeRegularizationConfig regularization = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_regularization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.TreeConstraintsConfig constraints = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_constraints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.LearningRateConfig learning_rate_tuner = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_learning_rate_tuner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.LearnerConfig.PruningMode pruning_mode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pruning_mode(static_cast< ::tensorflow::boosted_trees::learner::LearnerConfig_PruningMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.LearnerConfig.GrowingMode growing_mode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_growing_mode(static_cast< ::tensorflow::boosted_trees::learner::LearnerConfig_GrowingMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.LearnerConfig.MultiClassStrategy multi_class_strategy = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_multi_class_strategy(static_cast< ::tensorflow::boosted_trees::learner::LearnerConfig_MultiClassStrategy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.learner.AveragingConfig averaging_config = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_averaging_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.learner.LearnerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.learner.LearnerConfig)
  return false;
#undef DO_
}

void LearnerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.learner.LearnerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_classes = 1;
  if (this->num_classes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_classes(), output);
  }

  // float feature_fraction_per_tree = 2;
  if (has_feature_fraction_per_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->feature_fraction_per_tree(), output);
  }

  // float feature_fraction_per_level = 3;
  if (has_feature_fraction_per_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->feature_fraction_per_level(), output);
  }

  // .tensorflow.boosted_trees.learner.TreeRegularizationConfig regularization = 4;
  if (this->has_regularization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *regularization_, output);
  }

  // .tensorflow.boosted_trees.learner.TreeConstraintsConfig constraints = 5;
  if (this->has_constraints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *constraints_, output);
  }

  // .tensorflow.boosted_trees.learner.LearningRateConfig learning_rate_tuner = 6;
  if (this->has_learning_rate_tuner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *learning_rate_tuner_, output);
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.PruningMode pruning_mode = 8;
  if (this->pruning_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->pruning_mode(), output);
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.GrowingMode growing_mode = 9;
  if (this->growing_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->growing_mode(), output);
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.MultiClassStrategy multi_class_strategy = 10;
  if (this->multi_class_strategy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->multi_class_strategy(), output);
  }

  // .tensorflow.boosted_trees.learner.AveragingConfig averaging_config = 11;
  if (this->has_averaging_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *averaging_config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.learner.LearnerConfig)
}

::google::protobuf::uint8* LearnerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.learner.LearnerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_classes = 1;
  if (this->num_classes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_classes(), target);
  }

  // float feature_fraction_per_tree = 2;
  if (has_feature_fraction_per_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->feature_fraction_per_tree(), target);
  }

  // float feature_fraction_per_level = 3;
  if (has_feature_fraction_per_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->feature_fraction_per_level(), target);
  }

  // .tensorflow.boosted_trees.learner.TreeRegularizationConfig regularization = 4;
  if (this->has_regularization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *regularization_, deterministic, target);
  }

  // .tensorflow.boosted_trees.learner.TreeConstraintsConfig constraints = 5;
  if (this->has_constraints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *constraints_, deterministic, target);
  }

  // .tensorflow.boosted_trees.learner.LearningRateConfig learning_rate_tuner = 6;
  if (this->has_learning_rate_tuner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *learning_rate_tuner_, deterministic, target);
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.PruningMode pruning_mode = 8;
  if (this->pruning_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->pruning_mode(), target);
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.GrowingMode growing_mode = 9;
  if (this->growing_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->growing_mode(), target);
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.MultiClassStrategy multi_class_strategy = 10;
  if (this->multi_class_strategy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->multi_class_strategy(), target);
  }

  // .tensorflow.boosted_trees.learner.AveragingConfig averaging_config = 11;
  if (this->has_averaging_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *averaging_config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.learner.LearnerConfig)
  return target;
}

size_t LearnerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.learner.LearnerConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.boosted_trees.learner.TreeRegularizationConfig regularization = 4;
  if (this->has_regularization()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *regularization_);
  }

  // .tensorflow.boosted_trees.learner.TreeConstraintsConfig constraints = 5;
  if (this->has_constraints()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *constraints_);
  }

  // .tensorflow.boosted_trees.learner.LearningRateConfig learning_rate_tuner = 6;
  if (this->has_learning_rate_tuner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *learning_rate_tuner_);
  }

  // .tensorflow.boosted_trees.learner.AveragingConfig averaging_config = 11;
  if (this->has_averaging_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *averaging_config_);
  }

  // uint32 num_classes = 1;
  if (this->num_classes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_classes());
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.PruningMode pruning_mode = 8;
  if (this->pruning_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pruning_mode());
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.GrowingMode growing_mode = 9;
  if (this->growing_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->growing_mode());
  }

  // .tensorflow.boosted_trees.learner.LearnerConfig.MultiClassStrategy multi_class_strategy = 10;
  if (this->multi_class_strategy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->multi_class_strategy());
  }

  switch (feature_fraction_case()) {
    // float feature_fraction_per_tree = 2;
    case kFeatureFractionPerTree: {
      total_size += 1 + 4;
      break;
    }
    // float feature_fraction_per_level = 3;
    case kFeatureFractionPerLevel: {
      total_size += 1 + 4;
      break;
    }
    case FEATURE_FRACTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearnerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.learner.LearnerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LearnerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearnerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.learner.LearnerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.learner.LearnerConfig)
    MergeFrom(*source);
  }
}

void LearnerConfig::MergeFrom(const LearnerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.learner.LearnerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_regularization()) {
    mutable_regularization()->::tensorflow::boosted_trees::learner::TreeRegularizationConfig::MergeFrom(from.regularization());
  }
  if (from.has_constraints()) {
    mutable_constraints()->::tensorflow::boosted_trees::learner::TreeConstraintsConfig::MergeFrom(from.constraints());
  }
  if (from.has_learning_rate_tuner()) {
    mutable_learning_rate_tuner()->::tensorflow::boosted_trees::learner::LearningRateConfig::MergeFrom(from.learning_rate_tuner());
  }
  if (from.has_averaging_config()) {
    mutable_averaging_config()->::tensorflow::boosted_trees::learner::AveragingConfig::MergeFrom(from.averaging_config());
  }
  if (from.num_classes() != 0) {
    set_num_classes(from.num_classes());
  }
  if (from.pruning_mode() != 0) {
    set_pruning_mode(from.pruning_mode());
  }
  if (from.growing_mode() != 0) {
    set_growing_mode(from.growing_mode());
  }
  if (from.multi_class_strategy() != 0) {
    set_multi_class_strategy(from.multi_class_strategy());
  }
  switch (from.feature_fraction_case()) {
    case kFeatureFractionPerTree: {
      set_feature_fraction_per_tree(from.feature_fraction_per_tree());
      break;
    }
    case kFeatureFractionPerLevel: {
      set_feature_fraction_per_level(from.feature_fraction_per_level());
      break;
    }
    case FEATURE_FRACTION_NOT_SET: {
      break;
    }
  }
}

void LearnerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.learner.LearnerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearnerConfig::CopyFrom(const LearnerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.learner.LearnerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearnerConfig::IsInitialized() const {
  return true;
}

void LearnerConfig::Swap(LearnerConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LearnerConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LearnerConfig::UnsafeArenaSwap(LearnerConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LearnerConfig::InternalSwap(LearnerConfig* other) {
  using std::swap;
  swap(regularization_, other->regularization_);
  swap(constraints_, other->constraints_);
  swap(learning_rate_tuner_, other->learning_rate_tuner_);
  swap(averaging_config_, other->averaging_config_);
  swap(num_classes_, other->num_classes_);
  swap(pruning_mode_, other->pruning_mode_);
  swap(growing_mode_, other->growing_mode_);
  swap(multi_class_strategy_, other->multi_class_strategy_);
  swap(feature_fraction_, other->feature_fraction_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LearnerConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2flearner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace learner
}  // namespace boosted_trees
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::learner::TreeRegularizationConfig* Arena::CreateMessage< ::tensorflow::boosted_trees::learner::TreeRegularizationConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::learner::TreeRegularizationConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::learner::TreeConstraintsConfig* Arena::CreateMessage< ::tensorflow::boosted_trees::learner::TreeConstraintsConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::learner::TreeConstraintsConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::learner::LearningRateConfig* Arena::CreateMessage< ::tensorflow::boosted_trees::learner::LearningRateConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::learner::LearningRateConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::learner::LearningRateFixedConfig* Arena::CreateMessage< ::tensorflow::boosted_trees::learner::LearningRateFixedConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::learner::LearningRateFixedConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig* Arena::CreateMessage< ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::learner::LearningRateLineSearchConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::learner::AveragingConfig* Arena::CreateMessage< ::tensorflow::boosted_trees::learner::AveragingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::learner::AveragingConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig* Arena::CreateMessage< ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::learner::LearningRateDropoutDrivenConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::learner::LearnerConfig* Arena::CreateMessage< ::tensorflow::boosted_trees::learner::LearnerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::learner::LearnerConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
