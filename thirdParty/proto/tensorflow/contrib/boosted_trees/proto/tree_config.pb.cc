// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/boosted_trees/proto/tree_config.proto

#include "tensorflow/contrib/boosted_trees/proto/tree_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace tensorflow {
namespace boosted_trees {
namespace trees {
class TreeNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TreeNode>
      _instance;
  const ::tensorflow::boosted_trees::trees::Leaf* leaf_;
  const ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* dense_float_binary_split_;
  const ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft* sparse_float_binary_split_default_left_;
  const ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight* sparse_float_binary_split_default_right_;
  const ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit* categorical_id_binary_split_;
  const ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit* categorical_id_set_membership_binary_split_;
} _TreeNode_default_instance_;
class TreeNodeMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TreeNodeMetadata>
      _instance;
} _TreeNodeMetadata_default_instance_;
class LeafDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Leaf>
      _instance;
  const ::tensorflow::boosted_trees::trees::Vector* vector_;
  const ::tensorflow::boosted_trees::trees::SparseVector* sparse_vector_;
} _Leaf_default_instance_;
class VectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector>
      _instance;
} _Vector_default_instance_;
class SparseVectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SparseVector>
      _instance;
} _SparseVector_default_instance_;
class DenseFloatBinarySplitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DenseFloatBinarySplit>
      _instance;
} _DenseFloatBinarySplit_default_instance_;
class SparseFloatBinarySplitDefaultLeftDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SparseFloatBinarySplitDefaultLeft>
      _instance;
} _SparseFloatBinarySplitDefaultLeft_default_instance_;
class SparseFloatBinarySplitDefaultRightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SparseFloatBinarySplitDefaultRight>
      _instance;
} _SparseFloatBinarySplitDefaultRight_default_instance_;
class CategoricalIdBinarySplitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CategoricalIdBinarySplit>
      _instance;
} _CategoricalIdBinarySplit_default_instance_;
class CategoricalIdSetMembershipBinarySplitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CategoricalIdSetMembershipBinarySplit>
      _instance;
} _CategoricalIdSetMembershipBinarySplit_default_instance_;
class DecisionTreeConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DecisionTreeConfig>
      _instance;
} _DecisionTreeConfig_default_instance_;
class DecisionTreeMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DecisionTreeMetadata>
      _instance;
} _DecisionTreeMetadata_default_instance_;
class GrowingMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GrowingMetadata>
      _instance;
} _GrowingMetadata_default_instance_;
class DecisionTreeEnsembleConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DecisionTreeEnsembleConfig>
      _instance;
} _DecisionTreeEnsembleConfig_default_instance_;
}  // namespace trees
}  // namespace boosted_trees
}  // namespace tensorflow
namespace protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto {
void InitDefaultsTreeNodeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsLeaf();
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDenseFloatBinarySplit();
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsSparseFloatBinarySplitDefaultLeft();
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsSparseFloatBinarySplitDefaultRight();
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsCategoricalIdBinarySplit();
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsCategoricalIdSetMembershipBinarySplit();
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsTreeNodeMetadata();
  {
    void* ptr = &::tensorflow::boosted_trees::trees::_TreeNode_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::trees::TreeNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::trees::TreeNode::InitAsDefaultInstance();
}

void InitDefaultsTreeNode() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTreeNodeImpl);
}

void InitDefaultsTreeNodeMetadataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsLeaf();
  {
    void* ptr = &::tensorflow::boosted_trees::trees::_TreeNodeMetadata_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::trees::TreeNodeMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::trees::TreeNodeMetadata::InitAsDefaultInstance();
}

void InitDefaultsTreeNodeMetadata() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTreeNodeMetadataImpl);
}

void InitDefaultsLeafImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsVector();
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsSparseVector();
  {
    void* ptr = &::tensorflow::boosted_trees::trees::_Leaf_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::trees::Leaf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::trees::Leaf::InitAsDefaultInstance();
}

void InitDefaultsLeaf() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLeafImpl);
}

void InitDefaultsVectorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tensorflow::boosted_trees::trees::_Vector_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::trees::Vector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::trees::Vector::InitAsDefaultInstance();
}

void InitDefaultsVector() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVectorImpl);
}

void InitDefaultsSparseVectorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tensorflow::boosted_trees::trees::_SparseVector_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::trees::SparseVector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::trees::SparseVector::InitAsDefaultInstance();
}

void InitDefaultsSparseVector() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSparseVectorImpl);
}

void InitDefaultsDenseFloatBinarySplitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tensorflow::boosted_trees::trees::_DenseFloatBinarySplit_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::InitAsDefaultInstance();
}

void InitDefaultsDenseFloatBinarySplit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDenseFloatBinarySplitImpl);
}

void InitDefaultsSparseFloatBinarySplitDefaultLeftImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDenseFloatBinarySplit();
  {
    void* ptr = &::tensorflow::boosted_trees::trees::_SparseFloatBinarySplitDefaultLeft_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft::InitAsDefaultInstance();
}

void InitDefaultsSparseFloatBinarySplitDefaultLeft() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSparseFloatBinarySplitDefaultLeftImpl);
}

void InitDefaultsSparseFloatBinarySplitDefaultRightImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDenseFloatBinarySplit();
  {
    void* ptr = &::tensorflow::boosted_trees::trees::_SparseFloatBinarySplitDefaultRight_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight::InitAsDefaultInstance();
}

void InitDefaultsSparseFloatBinarySplitDefaultRight() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSparseFloatBinarySplitDefaultRightImpl);
}

void InitDefaultsCategoricalIdBinarySplitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tensorflow::boosted_trees::trees::_CategoricalIdBinarySplit_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit::InitAsDefaultInstance();
}

void InitDefaultsCategoricalIdBinarySplit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCategoricalIdBinarySplitImpl);
}

void InitDefaultsCategoricalIdSetMembershipBinarySplitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tensorflow::boosted_trees::trees::_CategoricalIdSetMembershipBinarySplit_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit::InitAsDefaultInstance();
}

void InitDefaultsCategoricalIdSetMembershipBinarySplit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCategoricalIdSetMembershipBinarySplitImpl);
}

void InitDefaultsDecisionTreeConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsTreeNode();
  {
    void* ptr = &::tensorflow::boosted_trees::trees::_DecisionTreeConfig_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::trees::DecisionTreeConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::trees::DecisionTreeConfig::InitAsDefaultInstance();
}

void InitDefaultsDecisionTreeConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDecisionTreeConfigImpl);
}

void InitDefaultsDecisionTreeMetadataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tensorflow::boosted_trees::trees::_DecisionTreeMetadata_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::trees::DecisionTreeMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::trees::DecisionTreeMetadata::InitAsDefaultInstance();
}

void InitDefaultsDecisionTreeMetadata() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDecisionTreeMetadataImpl);
}

void InitDefaultsGrowingMetadataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tensorflow::boosted_trees::trees::_GrowingMetadata_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::trees::GrowingMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::trees::GrowingMetadata::InitAsDefaultInstance();
}

void InitDefaultsGrowingMetadata() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGrowingMetadataImpl);
}

void InitDefaultsDecisionTreeEnsembleConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDecisionTreeConfig();
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDecisionTreeMetadata();
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsGrowingMetadata();
  {
    void* ptr = &::tensorflow::boosted_trees::trees::_DecisionTreeEnsembleConfig_default_instance_;
    new (ptr) ::tensorflow::boosted_trees::trees::DecisionTreeEnsembleConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::boosted_trees::trees::DecisionTreeEnsembleConfig::InitAsDefaultInstance();
}

void InitDefaultsDecisionTreeEnsembleConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDecisionTreeEnsembleConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[14];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::TreeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::TreeNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::boosted_trees::trees::TreeNodeDefaultTypeInternal, leaf_),
  offsetof(::tensorflow::boosted_trees::trees::TreeNodeDefaultTypeInternal, dense_float_binary_split_),
  offsetof(::tensorflow::boosted_trees::trees::TreeNodeDefaultTypeInternal, sparse_float_binary_split_default_left_),
  offsetof(::tensorflow::boosted_trees::trees::TreeNodeDefaultTypeInternal, sparse_float_binary_split_default_right_),
  offsetof(::tensorflow::boosted_trees::trees::TreeNodeDefaultTypeInternal, categorical_id_binary_split_),
  offsetof(::tensorflow::boosted_trees::trees::TreeNodeDefaultTypeInternal, categorical_id_set_membership_binary_split_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::TreeNode, node_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::TreeNode, node_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::TreeNodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::TreeNodeMetadata, gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::TreeNodeMetadata, original_leaf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::Leaf, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::Leaf, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::boosted_trees::trees::LeafDefaultTypeInternal, vector_),
  offsetof(::tensorflow::boosted_trees::trees::LeafDefaultTypeInternal, sparse_vector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::Leaf, leaf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::Vector, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::SparseVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::SparseVector, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::SparseVector, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DenseFloatBinarySplit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DenseFloatBinarySplit, feature_column_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DenseFloatBinarySplit, dimension_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DenseFloatBinarySplit, threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DenseFloatBinarySplit, left_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DenseFloatBinarySplit, right_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft, split_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight, split_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit, feature_column_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit, feature_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit, left_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit, right_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit, feature_column_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit, feature_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit, left_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit, right_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DecisionTreeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DecisionTreeConfig, nodes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DecisionTreeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DecisionTreeMetadata, num_tree_weight_updates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DecisionTreeMetadata, num_layers_grown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DecisionTreeMetadata, is_finalized_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::GrowingMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::GrowingMetadata, num_trees_attempted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::GrowingMetadata, num_layers_attempted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::GrowingMetadata, used_handler_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DecisionTreeEnsembleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DecisionTreeEnsembleConfig, trees_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DecisionTreeEnsembleConfig, tree_weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DecisionTreeEnsembleConfig, tree_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::boosted_trees::trees::DecisionTreeEnsembleConfig, growing_metadata_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::boosted_trees::trees::TreeNode)},
  { 13, -1, sizeof(::tensorflow::boosted_trees::trees::TreeNodeMetadata)},
  { 20, -1, sizeof(::tensorflow::boosted_trees::trees::Leaf)},
  { 28, -1, sizeof(::tensorflow::boosted_trees::trees::Vector)},
  { 34, -1, sizeof(::tensorflow::boosted_trees::trees::SparseVector)},
  { 41, -1, sizeof(::tensorflow::boosted_trees::trees::DenseFloatBinarySplit)},
  { 51, -1, sizeof(::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft)},
  { 57, -1, sizeof(::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight)},
  { 63, -1, sizeof(::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit)},
  { 72, -1, sizeof(::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit)},
  { 81, -1, sizeof(::tensorflow::boosted_trees::trees::DecisionTreeConfig)},
  { 87, -1, sizeof(::tensorflow::boosted_trees::trees::DecisionTreeMetadata)},
  { 95, -1, sizeof(::tensorflow::boosted_trees::trees::GrowingMetadata)},
  { 103, -1, sizeof(::tensorflow::boosted_trees::trees::DecisionTreeEnsembleConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::trees::_TreeNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::trees::_TreeNodeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::trees::_Leaf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::trees::_Vector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::trees::_SparseVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::trees::_DenseFloatBinarySplit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::trees::_SparseFloatBinarySplitDefaultLeft_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::trees::_SparseFloatBinarySplitDefaultRight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::trees::_CategoricalIdBinarySplit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::trees::_CategoricalIdSetMembershipBinarySplit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::trees::_DecisionTreeConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::trees::_DecisionTreeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::trees::_GrowingMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::boosted_trees::trees::_DecisionTreeEnsembleConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/contrib/boosted_trees/proto/tree_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n8tensorflow/contrib/boosted_trees/proto"
      "/tree_config.proto\022\036tensorflow.boosted_t"
      "rees.trees\"\267\005\n\010TreeNode\0224\n\004leaf\030\001 \001(\0132$."
      "tensorflow.boosted_trees.trees.LeafH\000\022Y\n"
      "\030dense_float_binary_split\030\002 \001(\01325.tensor"
      "flow.boosted_trees.trees.DenseFloatBinar"
      "ySplitH\000\022s\n&sparse_float_binary_split_de"
      "fault_left\030\003 \001(\0132A.tensorflow.boosted_tr"
      "ees.trees.SparseFloatBinarySplitDefaultL"
      "eftH\000\022u\n\'sparse_float_binary_split_defau"
      "lt_right\030\004 \001(\0132B.tensorflow.boosted_tree"
      "s.trees.SparseFloatBinarySplitDefaultRig"
      "htH\000\022_\n\033categorical_id_binary_split\030\005 \001("
      "\01328.tensorflow.boosted_trees.trees.Categ"
      "oricalIdBinarySplitH\000\022{\n*categorical_id_"
      "set_membership_binary_split\030\006 \001(\0132E.tens"
      "orflow.boosted_trees.trees.CategoricalId"
      "SetMembershipBinarySplitH\000\022H\n\rnode_metad"
      "ata\030\211\006 \001(\01320.tensorflow.boosted_trees.tr"
      "ees.TreeNodeMetadataB\006\n\004node\"]\n\020TreeNode"
      "Metadata\022\014\n\004gain\030\001 \001(\002\022;\n\roriginal_leaf\030"
      "\002 \001(\0132$.tensorflow.boosted_trees.trees.L"
      "eaf\"\217\001\n\004Leaf\0228\n\006vector\030\001 \001(\0132&.tensorflo"
      "w.boosted_trees.trees.VectorH\000\022E\n\rsparse"
      "_vector\030\002 \001(\0132,.tensorflow.boosted_trees"
      ".trees.SparseVectorH\000B\006\n\004leaf\"\027\n\006Vector\022"
      "\r\n\005value\030\001 \003(\002\",\n\014SparseVector\022\r\n\005index\030"
      "\001 \003(\005\022\r\n\005value\030\002 \003(\002\"{\n\025DenseFloatBinary"
      "Split\022\026\n\016feature_column\030\001 \001(\005\022\024\n\014dimensi"
      "on_id\030\005 \001(\005\022\021\n\tthreshold\030\002 \001(\002\022\017\n\007left_i"
      "d\030\003 \001(\005\022\020\n\010right_id\030\004 \001(\005\"i\n!SparseFloat"
      "BinarySplitDefaultLeft\022D\n\005split\030\001 \001(\01325."
      "tensorflow.boosted_trees.trees.DenseFloa"
      "tBinarySplit\"j\n\"SparseFloatBinarySplitDe"
      "faultRight\022D\n\005split\030\001 \001(\01325.tensorflow.b"
      "oosted_trees.trees.DenseFloatBinarySplit"
      "\"i\n\030CategoricalIdBinarySplit\022\026\n\016feature_"
      "column\030\001 \001(\005\022\022\n\nfeature_id\030\002 \001(\003\022\017\n\007left"
      "_id\030\003 \001(\005\022\020\n\010right_id\030\004 \001(\005\"w\n%Categoric"
      "alIdSetMembershipBinarySplit\022\026\n\016feature_"
      "column\030\001 \001(\005\022\023\n\013feature_ids\030\002 \003(\003\022\017\n\007lef"
      "t_id\030\003 \001(\005\022\020\n\010right_id\030\004 \001(\005\"M\n\022Decision"
      "TreeConfig\0227\n\005nodes\030\001 \003(\0132(.tensorflow.b"
      "oosted_trees.trees.TreeNode\"g\n\024DecisionT"
      "reeMetadata\022\037\n\027num_tree_weight_updates\030\001"
      " \001(\005\022\030\n\020num_layers_grown\030\002 \001(\005\022\024\n\014is_fin"
      "alized\030\003 \001(\010\"f\n\017GrowingMetadata\022\033\n\023num_t"
      "rees_attempted\030\001 \001(\003\022\034\n\024num_layers_attem"
      "pted\030\002 \001(\003\022\030\n\020used_handler_ids\030\003 \003(\003\"\215\002\n"
      "\032DecisionTreeEnsembleConfig\022A\n\005trees\030\001 \003"
      "(\01322.tensorflow.boosted_trees.trees.Deci"
      "sionTreeConfig\022\024\n\014tree_weights\030\002 \003(\002\022K\n\r"
      "tree_metadata\030\003 \003(\01324.tensorflow.boosted"
      "_trees.trees.DecisionTreeMetadata\022I\n\020gro"
      "wing_metadata\030\004 \001(\0132/.tensorflow.boosted"
      "_trees.trees.GrowingMetadataB\003\370\001\001b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2241);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/contrib/boosted_trees/proto/tree_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto
namespace tensorflow {
namespace boosted_trees {
namespace trees {

// ===================================================================

void TreeNode::InitAsDefaultInstance() {
  ::tensorflow::boosted_trees::trees::_TreeNode_default_instance_.leaf_ = const_cast< ::tensorflow::boosted_trees::trees::Leaf*>(
      ::tensorflow::boosted_trees::trees::Leaf::internal_default_instance());
  ::tensorflow::boosted_trees::trees::_TreeNode_default_instance_.dense_float_binary_split_ = const_cast< ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit*>(
      ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::internal_default_instance());
  ::tensorflow::boosted_trees::trees::_TreeNode_default_instance_.sparse_float_binary_split_default_left_ = const_cast< ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft*>(
      ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft::internal_default_instance());
  ::tensorflow::boosted_trees::trees::_TreeNode_default_instance_.sparse_float_binary_split_default_right_ = const_cast< ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight*>(
      ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight::internal_default_instance());
  ::tensorflow::boosted_trees::trees::_TreeNode_default_instance_.categorical_id_binary_split_ = const_cast< ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit*>(
      ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit::internal_default_instance());
  ::tensorflow::boosted_trees::trees::_TreeNode_default_instance_.categorical_id_set_membership_binary_split_ = const_cast< ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit*>(
      ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit::internal_default_instance());
  ::tensorflow::boosted_trees::trees::_TreeNode_default_instance_._instance.get_mutable()->node_metadata_ = const_cast< ::tensorflow::boosted_trees::trees::TreeNodeMetadata*>(
      ::tensorflow::boosted_trees::trees::TreeNodeMetadata::internal_default_instance());
}
void TreeNode::set_allocated_leaf(::tensorflow::boosted_trees::trees::Leaf* leaf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_node();
  if (leaf) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(leaf);
    if (message_arena != submessage_arena) {
      leaf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leaf, submessage_arena);
    }
    set_has_leaf();
    node_.leaf_ = leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.TreeNode.leaf)
}
void TreeNode::set_allocated_dense_float_binary_split(::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* dense_float_binary_split) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_node();
  if (dense_float_binary_split) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(dense_float_binary_split);
    if (message_arena != submessage_arena) {
      dense_float_binary_split = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dense_float_binary_split, submessage_arena);
    }
    set_has_dense_float_binary_split();
    node_.dense_float_binary_split_ = dense_float_binary_split;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.TreeNode.dense_float_binary_split)
}
void TreeNode::set_allocated_sparse_float_binary_split_default_left(::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft* sparse_float_binary_split_default_left) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_node();
  if (sparse_float_binary_split_default_left) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(sparse_float_binary_split_default_left);
    if (message_arena != submessage_arena) {
      sparse_float_binary_split_default_left = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sparse_float_binary_split_default_left, submessage_arena);
    }
    set_has_sparse_float_binary_split_default_left();
    node_.sparse_float_binary_split_default_left_ = sparse_float_binary_split_default_left;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.TreeNode.sparse_float_binary_split_default_left)
}
void TreeNode::set_allocated_sparse_float_binary_split_default_right(::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight* sparse_float_binary_split_default_right) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_node();
  if (sparse_float_binary_split_default_right) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(sparse_float_binary_split_default_right);
    if (message_arena != submessage_arena) {
      sparse_float_binary_split_default_right = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sparse_float_binary_split_default_right, submessage_arena);
    }
    set_has_sparse_float_binary_split_default_right();
    node_.sparse_float_binary_split_default_right_ = sparse_float_binary_split_default_right;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.TreeNode.sparse_float_binary_split_default_right)
}
void TreeNode::set_allocated_categorical_id_binary_split(::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit* categorical_id_binary_split) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_node();
  if (categorical_id_binary_split) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(categorical_id_binary_split);
    if (message_arena != submessage_arena) {
      categorical_id_binary_split = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, categorical_id_binary_split, submessage_arena);
    }
    set_has_categorical_id_binary_split();
    node_.categorical_id_binary_split_ = categorical_id_binary_split;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.TreeNode.categorical_id_binary_split)
}
void TreeNode::set_allocated_categorical_id_set_membership_binary_split(::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit* categorical_id_set_membership_binary_split) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_node();
  if (categorical_id_set_membership_binary_split) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(categorical_id_set_membership_binary_split);
    if (message_arena != submessage_arena) {
      categorical_id_set_membership_binary_split = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, categorical_id_set_membership_binary_split, submessage_arena);
    }
    set_has_categorical_id_set_membership_binary_split();
    node_.categorical_id_set_membership_binary_split_ = categorical_id_set_membership_binary_split;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.TreeNode.categorical_id_set_membership_binary_split)
}
void TreeNode::unsafe_arena_set_allocated_node_metadata(
    ::tensorflow::boosted_trees::trees::TreeNodeMetadata* node_metadata) {
  if (GetArenaNoVirtual() == NULL) {
    delete node_metadata_;
  }
  node_metadata_ = node_metadata;
  if (node_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.TreeNode.node_metadata)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeNode::kLeafFieldNumber;
const int TreeNode::kDenseFloatBinarySplitFieldNumber;
const int TreeNode::kSparseFloatBinarySplitDefaultLeftFieldNumber;
const int TreeNode::kSparseFloatBinarySplitDefaultRightFieldNumber;
const int TreeNode::kCategoricalIdBinarySplitFieldNumber;
const int TreeNode::kCategoricalIdSetMembershipBinarySplitFieldNumber;
const int TreeNode::kNodeMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeNode::TreeNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsTreeNode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.TreeNode)
}
TreeNode::TreeNode(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsTreeNode();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.TreeNode)
}
TreeNode::TreeNode(const TreeNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_metadata()) {
    node_metadata_ = new ::tensorflow::boosted_trees::trees::TreeNodeMetadata(*from.node_metadata_);
  } else {
    node_metadata_ = NULL;
  }
  clear_has_node();
  switch (from.node_case()) {
    case kLeaf: {
      mutable_leaf()->::tensorflow::boosted_trees::trees::Leaf::MergeFrom(from.leaf());
      break;
    }
    case kDenseFloatBinarySplit: {
      mutable_dense_float_binary_split()->::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::MergeFrom(from.dense_float_binary_split());
      break;
    }
    case kSparseFloatBinarySplitDefaultLeft: {
      mutable_sparse_float_binary_split_default_left()->::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft::MergeFrom(from.sparse_float_binary_split_default_left());
      break;
    }
    case kSparseFloatBinarySplitDefaultRight: {
      mutable_sparse_float_binary_split_default_right()->::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight::MergeFrom(from.sparse_float_binary_split_default_right());
      break;
    }
    case kCategoricalIdBinarySplit: {
      mutable_categorical_id_binary_split()->::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit::MergeFrom(from.categorical_id_binary_split());
      break;
    }
    case kCategoricalIdSetMembershipBinarySplit: {
      mutable_categorical_id_set_membership_binary_split()->::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit::MergeFrom(from.categorical_id_set_membership_binary_split());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.TreeNode)
}

void TreeNode::SharedCtor() {
  node_metadata_ = NULL;
  clear_has_node();
  _cached_size_ = 0;
}

TreeNode::~TreeNode() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.TreeNode)
  SharedDtor();
}

void TreeNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete node_metadata_;
  if (has_node()) {
    clear_node();
  }
}

void TreeNode::ArenaDtor(void* object) {
  TreeNode* _this = reinterpret_cast< TreeNode* >(object);
  (void)_this;
}
void TreeNode::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TreeNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeNode::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TreeNode& TreeNode::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsTreeNode();
  return *internal_default_instance();
}


void TreeNode::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.boosted_trees.trees.TreeNode)
  switch (node_case()) {
    case kLeaf: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_.leaf_;
      }
      break;
    }
    case kDenseFloatBinarySplit: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_.dense_float_binary_split_;
      }
      break;
    }
    case kSparseFloatBinarySplitDefaultLeft: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_.sparse_float_binary_split_default_left_;
      }
      break;
    }
    case kSparseFloatBinarySplitDefaultRight: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_.sparse_float_binary_split_default_right_;
      }
      break;
    }
    case kCategoricalIdBinarySplit: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_.categorical_id_binary_split_;
      }
      break;
    }
    case kCategoricalIdSetMembershipBinarySplit: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_.categorical_id_set_membership_binary_split_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void TreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.TreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && node_metadata_ != NULL) {
    delete node_metadata_;
  }
  node_metadata_ = NULL;
  clear_node();
  _internal_metadata_.Clear();
}

bool TreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.TreeNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.boosted_trees.trees.Leaf leaf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leaf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit dense_float_binary_split = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dense_float_binary_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft sparse_float_binary_split_default_left = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sparse_float_binary_split_default_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight sparse_float_binary_split_default_right = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sparse_float_binary_split_default_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.CategoricalIdBinarySplit categorical_id_binary_split = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_categorical_id_binary_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit categorical_id_set_membership_binary_split = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_categorical_id_set_membership_binary_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.TreeNodeMetadata node_metadata = 777;
      case 777: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 6218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.TreeNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.TreeNode)
  return false;
#undef DO_
}

void TreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.TreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.boosted_trees.trees.Leaf leaf = 1;
  if (has_leaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *node_.leaf_, output);
  }

  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit dense_float_binary_split = 2;
  if (has_dense_float_binary_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *node_.dense_float_binary_split_, output);
  }

  // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft sparse_float_binary_split_default_left = 3;
  if (has_sparse_float_binary_split_default_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *node_.sparse_float_binary_split_default_left_, output);
  }

  // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight sparse_float_binary_split_default_right = 4;
  if (has_sparse_float_binary_split_default_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *node_.sparse_float_binary_split_default_right_, output);
  }

  // .tensorflow.boosted_trees.trees.CategoricalIdBinarySplit categorical_id_binary_split = 5;
  if (has_categorical_id_binary_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *node_.categorical_id_binary_split_, output);
  }

  // .tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit categorical_id_set_membership_binary_split = 6;
  if (has_categorical_id_set_membership_binary_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *node_.categorical_id_set_membership_binary_split_, output);
  }

  // .tensorflow.boosted_trees.trees.TreeNodeMetadata node_metadata = 777;
  if (this->has_node_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      777, *node_metadata_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.TreeNode)
}

::google::protobuf::uint8* TreeNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.TreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.boosted_trees.trees.Leaf leaf = 1;
  if (has_leaf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *node_.leaf_, deterministic, target);
  }

  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit dense_float_binary_split = 2;
  if (has_dense_float_binary_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *node_.dense_float_binary_split_, deterministic, target);
  }

  // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft sparse_float_binary_split_default_left = 3;
  if (has_sparse_float_binary_split_default_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *node_.sparse_float_binary_split_default_left_, deterministic, target);
  }

  // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight sparse_float_binary_split_default_right = 4;
  if (has_sparse_float_binary_split_default_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *node_.sparse_float_binary_split_default_right_, deterministic, target);
  }

  // .tensorflow.boosted_trees.trees.CategoricalIdBinarySplit categorical_id_binary_split = 5;
  if (has_categorical_id_binary_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *node_.categorical_id_binary_split_, deterministic, target);
  }

  // .tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit categorical_id_set_membership_binary_split = 6;
  if (has_categorical_id_set_membership_binary_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *node_.categorical_id_set_membership_binary_split_, deterministic, target);
  }

  // .tensorflow.boosted_trees.trees.TreeNodeMetadata node_metadata = 777;
  if (this->has_node_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        777, *node_metadata_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.TreeNode)
  return target;
}

size_t TreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.TreeNode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.boosted_trees.trees.TreeNodeMetadata node_metadata = 777;
  if (this->has_node_metadata()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_metadata_);
  }

  switch (node_case()) {
    // .tensorflow.boosted_trees.trees.Leaf leaf = 1;
    case kLeaf: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *node_.leaf_);
      break;
    }
    // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit dense_float_binary_split = 2;
    case kDenseFloatBinarySplit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *node_.dense_float_binary_split_);
      break;
    }
    // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft sparse_float_binary_split_default_left = 3;
    case kSparseFloatBinarySplitDefaultLeft: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *node_.sparse_float_binary_split_default_left_);
      break;
    }
    // .tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight sparse_float_binary_split_default_right = 4;
    case kSparseFloatBinarySplitDefaultRight: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *node_.sparse_float_binary_split_default_right_);
      break;
    }
    // .tensorflow.boosted_trees.trees.CategoricalIdBinarySplit categorical_id_binary_split = 5;
    case kCategoricalIdBinarySplit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *node_.categorical_id_binary_split_);
      break;
    }
    // .tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit categorical_id_set_membership_binary_split = 6;
    case kCategoricalIdSetMembershipBinarySplit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *node_.categorical_id_set_membership_binary_split_);
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.TreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.TreeNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.TreeNode)
    MergeFrom(*source);
  }
}

void TreeNode::MergeFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.TreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node_metadata()) {
    mutable_node_metadata()->::tensorflow::boosted_trees::trees::TreeNodeMetadata::MergeFrom(from.node_metadata());
  }
  switch (from.node_case()) {
    case kLeaf: {
      mutable_leaf()->::tensorflow::boosted_trees::trees::Leaf::MergeFrom(from.leaf());
      break;
    }
    case kDenseFloatBinarySplit: {
      mutable_dense_float_binary_split()->::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::MergeFrom(from.dense_float_binary_split());
      break;
    }
    case kSparseFloatBinarySplitDefaultLeft: {
      mutable_sparse_float_binary_split_default_left()->::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft::MergeFrom(from.sparse_float_binary_split_default_left());
      break;
    }
    case kSparseFloatBinarySplitDefaultRight: {
      mutable_sparse_float_binary_split_default_right()->::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight::MergeFrom(from.sparse_float_binary_split_default_right());
      break;
    }
    case kCategoricalIdBinarySplit: {
      mutable_categorical_id_binary_split()->::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit::MergeFrom(from.categorical_id_binary_split());
      break;
    }
    case kCategoricalIdSetMembershipBinarySplit: {
      mutable_categorical_id_set_membership_binary_split()->::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit::MergeFrom(from.categorical_id_set_membership_binary_split());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
}

void TreeNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeNode::CopyFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNode::IsInitialized() const {
  return true;
}

void TreeNode::Swap(TreeNode* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TreeNode* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TreeNode::UnsafeArenaSwap(TreeNode* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TreeNode::InternalSwap(TreeNode* other) {
  using std::swap;
  swap(node_metadata_, other->node_metadata_);
  swap(node_, other->node_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeNode::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TreeNodeMetadata::InitAsDefaultInstance() {
  ::tensorflow::boosted_trees::trees::_TreeNodeMetadata_default_instance_._instance.get_mutable()->original_leaf_ = const_cast< ::tensorflow::boosted_trees::trees::Leaf*>(
      ::tensorflow::boosted_trees::trees::Leaf::internal_default_instance());
}
void TreeNodeMetadata::unsafe_arena_set_allocated_original_leaf(
    ::tensorflow::boosted_trees::trees::Leaf* original_leaf) {
  if (GetArenaNoVirtual() == NULL) {
    delete original_leaf_;
  }
  original_leaf_ = original_leaf;
  if (original_leaf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.TreeNodeMetadata.original_leaf)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeNodeMetadata::kGainFieldNumber;
const int TreeNodeMetadata::kOriginalLeafFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeNodeMetadata::TreeNodeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsTreeNodeMetadata();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.TreeNodeMetadata)
}
TreeNodeMetadata::TreeNodeMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsTreeNodeMetadata();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.TreeNodeMetadata)
}
TreeNodeMetadata::TreeNodeMetadata(const TreeNodeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_original_leaf()) {
    original_leaf_ = new ::tensorflow::boosted_trees::trees::Leaf(*from.original_leaf_);
  } else {
    original_leaf_ = NULL;
  }
  gain_ = from.gain_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.TreeNodeMetadata)
}

void TreeNodeMetadata::SharedCtor() {
  ::memset(&original_leaf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gain_) -
      reinterpret_cast<char*>(&original_leaf_)) + sizeof(gain_));
  _cached_size_ = 0;
}

TreeNodeMetadata::~TreeNodeMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  SharedDtor();
}

void TreeNodeMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete original_leaf_;
}

void TreeNodeMetadata::ArenaDtor(void* object) {
  TreeNodeMetadata* _this = reinterpret_cast< TreeNodeMetadata* >(object);
  (void)_this;
}
void TreeNodeMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TreeNodeMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeNodeMetadata::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TreeNodeMetadata& TreeNodeMetadata::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsTreeNodeMetadata();
  return *internal_default_instance();
}


void TreeNodeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && original_leaf_ != NULL) {
    delete original_leaf_;
  }
  original_leaf_ = NULL;
  gain_ = 0;
  _internal_metadata_.Clear();
}

bool TreeNodeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float gain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.Leaf original_leaf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_original_leaf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  return false;
#undef DO_
}

void TreeNodeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float gain = 1;
  if (this->gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->gain(), output);
  }

  // .tensorflow.boosted_trees.trees.Leaf original_leaf = 2;
  if (this->has_original_leaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *original_leaf_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.TreeNodeMetadata)
}

::google::protobuf::uint8* TreeNodeMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float gain = 1;
  if (this->gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->gain(), target);
  }

  // .tensorflow.boosted_trees.trees.Leaf original_leaf = 2;
  if (this->has_original_leaf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *original_leaf_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  return target;
}

size_t TreeNodeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.boosted_trees.trees.Leaf original_leaf = 2;
  if (this->has_original_leaf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *original_leaf_);
  }

  // float gain = 1;
  if (this->gain() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeNodeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeNodeMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeNodeMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.TreeNodeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.TreeNodeMetadata)
    MergeFrom(*source);
  }
}

void TreeNodeMetadata::MergeFrom(const TreeNodeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_original_leaf()) {
    mutable_original_leaf()->::tensorflow::boosted_trees::trees::Leaf::MergeFrom(from.original_leaf());
  }
  if (from.gain() != 0) {
    set_gain(from.gain());
  }
}

void TreeNodeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeNodeMetadata::CopyFrom(const TreeNodeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.TreeNodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNodeMetadata::IsInitialized() const {
  return true;
}

void TreeNodeMetadata::Swap(TreeNodeMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TreeNodeMetadata* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TreeNodeMetadata::UnsafeArenaSwap(TreeNodeMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TreeNodeMetadata::InternalSwap(TreeNodeMetadata* other) {
  using std::swap;
  swap(original_leaf_, other->original_leaf_);
  swap(gain_, other->gain_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeNodeMetadata::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Leaf::InitAsDefaultInstance() {
  ::tensorflow::boosted_trees::trees::_Leaf_default_instance_.vector_ = const_cast< ::tensorflow::boosted_trees::trees::Vector*>(
      ::tensorflow::boosted_trees::trees::Vector::internal_default_instance());
  ::tensorflow::boosted_trees::trees::_Leaf_default_instance_.sparse_vector_ = const_cast< ::tensorflow::boosted_trees::trees::SparseVector*>(
      ::tensorflow::boosted_trees::trees::SparseVector::internal_default_instance());
}
void Leaf::set_allocated_vector(::tensorflow::boosted_trees::trees::Vector* vector) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_leaf();
  if (vector) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(vector);
    if (message_arena != submessage_arena) {
      vector = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    set_has_vector();
    leaf_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.Leaf.vector)
}
void Leaf::set_allocated_sparse_vector(::tensorflow::boosted_trees::trees::SparseVector* sparse_vector) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_leaf();
  if (sparse_vector) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(sparse_vector);
    if (message_arena != submessage_arena) {
      sparse_vector = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sparse_vector, submessage_arena);
    }
    set_has_sparse_vector();
    leaf_.sparse_vector_ = sparse_vector;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.trees.Leaf.sparse_vector)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Leaf::kVectorFieldNumber;
const int Leaf::kSparseVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Leaf::Leaf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsLeaf();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.Leaf)
}
Leaf::Leaf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsLeaf();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.Leaf)
}
Leaf::Leaf(const Leaf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_leaf();
  switch (from.leaf_case()) {
    case kVector: {
      mutable_vector()->::tensorflow::boosted_trees::trees::Vector::MergeFrom(from.vector());
      break;
    }
    case kSparseVector: {
      mutable_sparse_vector()->::tensorflow::boosted_trees::trees::SparseVector::MergeFrom(from.sparse_vector());
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.Leaf)
}

void Leaf::SharedCtor() {
  clear_has_leaf();
  _cached_size_ = 0;
}

Leaf::~Leaf() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.Leaf)
  SharedDtor();
}

void Leaf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_leaf()) {
    clear_leaf();
  }
}

void Leaf::ArenaDtor(void* object) {
  Leaf* _this = reinterpret_cast< Leaf* >(object);
  (void)_this;
}
void Leaf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Leaf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Leaf::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Leaf& Leaf::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsLeaf();
  return *internal_default_instance();
}


void Leaf::clear_leaf() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.boosted_trees.trees.Leaf)
  switch (leaf_case()) {
    case kVector: {
      if (GetArenaNoVirtual() == NULL) {
        delete leaf_.vector_;
      }
      break;
    }
    case kSparseVector: {
      if (GetArenaNoVirtual() == NULL) {
        delete leaf_.sparse_vector_;
      }
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEAF_NOT_SET;
}


void Leaf::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.Leaf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_leaf();
  _internal_metadata_.Clear();
}

bool Leaf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.Leaf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.boosted_trees.trees.Vector vector = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.SparseVector sparse_vector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sparse_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.Leaf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.Leaf)
  return false;
#undef DO_
}

void Leaf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.Leaf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.boosted_trees.trees.Vector vector = 1;
  if (has_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *leaf_.vector_, output);
  }

  // .tensorflow.boosted_trees.trees.SparseVector sparse_vector = 2;
  if (has_sparse_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *leaf_.sparse_vector_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.Leaf)
}

::google::protobuf::uint8* Leaf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.Leaf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.boosted_trees.trees.Vector vector = 1;
  if (has_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *leaf_.vector_, deterministic, target);
  }

  // .tensorflow.boosted_trees.trees.SparseVector sparse_vector = 2;
  if (has_sparse_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *leaf_.sparse_vector_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.Leaf)
  return target;
}

size_t Leaf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.Leaf)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (leaf_case()) {
    // .tensorflow.boosted_trees.trees.Vector vector = 1;
    case kVector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *leaf_.vector_);
      break;
    }
    // .tensorflow.boosted_trees.trees.SparseVector sparse_vector = 2;
    case kSparseVector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *leaf_.sparse_vector_);
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Leaf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.Leaf)
  GOOGLE_DCHECK_NE(&from, this);
  const Leaf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Leaf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.Leaf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.Leaf)
    MergeFrom(*source);
  }
}

void Leaf::MergeFrom(const Leaf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.Leaf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.leaf_case()) {
    case kVector: {
      mutable_vector()->::tensorflow::boosted_trees::trees::Vector::MergeFrom(from.vector());
      break;
    }
    case kSparseVector: {
      mutable_sparse_vector()->::tensorflow::boosted_trees::trees::SparseVector::MergeFrom(from.sparse_vector());
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
}

void Leaf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.Leaf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leaf::CopyFrom(const Leaf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.Leaf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leaf::IsInitialized() const {
  return true;
}

void Leaf::Swap(Leaf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Leaf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Leaf::UnsafeArenaSwap(Leaf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Leaf::InternalSwap(Leaf* other) {
  using std::swap;
  swap(leaf_, other->leaf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Leaf::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vector::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector::Vector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsVector();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.Vector)
}
Vector::Vector(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  value_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsVector();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.Vector)
}
Vector::Vector(const Vector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      value_(from.value_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.Vector)
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Vector::ArenaDtor(void* object) {
  Vector* _this = reinterpret_cast< Vector* >(object);
  (void)_this;
}
void Vector::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector& Vector::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsVector();
  return *internal_default_instance();
}


void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.Vector)
  return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1;
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _value_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->value().data(), this->value_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.Vector)
}

::google::protobuf::uint8* Vector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1;
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _value_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.Vector)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.Vector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.Vector)
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void Vector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::Swap(Vector* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Vector* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Vector::UnsafeArenaSwap(Vector* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Vector::InternalSwap(Vector* other) {
  using std::swap;
  value_.InternalSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SparseVector::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparseVector::kIndexFieldNumber;
const int SparseVector::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparseVector::SparseVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsSparseVector();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.SparseVector)
}
SparseVector::SparseVector(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  index_(arena),
  value_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsSparseVector();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.SparseVector)
}
SparseVector::SparseVector(const SparseVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      index_(from.index_),
      value_(from.value_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.SparseVector)
}

void SparseVector::SharedCtor() {
  _cached_size_ = 0;
}

SparseVector::~SparseVector() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.SparseVector)
  SharedDtor();
}

void SparseVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SparseVector::ArenaDtor(void* object) {
  SparseVector* _this = reinterpret_cast< SparseVector* >(object);
  (void)_this;
}
void SparseVector::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SparseVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseVector::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SparseVector& SparseVector::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsSparseVector();
  return *internal_default_instance();
}


void SparseVector::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.SparseVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.Clear();
  value_.Clear();
  _internal_metadata_.Clear();
}

bool SparseVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.SparseVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_index())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.SparseVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.SparseVector)
  return false;
#undef DO_
}

void SparseVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.SparseVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 index = 1;
  if (this->index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _index_cached_byte_size_));
  }
  for (int i = 0, n = this->index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->index(i), output);
  }

  // repeated float value = 2;
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _value_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->value().data(), this->value_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.SparseVector)
}

::google::protobuf::uint8* SparseVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.SparseVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 index = 1;
  if (this->index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _index_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->index_, target);
  }

  // repeated float value = 2;
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _value_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.SparseVector)
  return target;
}

size_t SparseVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.SparseVector)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 index = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->index_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _index_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float value = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.SparseVector)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SparseVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.SparseVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.SparseVector)
    MergeFrom(*source);
  }
}

void SparseVector::MergeFrom(const SparseVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.SparseVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_.MergeFrom(from.index_);
  value_.MergeFrom(from.value_);
}

void SparseVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.SparseVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseVector::CopyFrom(const SparseVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.SparseVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseVector::IsInitialized() const {
  return true;
}

void SparseVector::Swap(SparseVector* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SparseVector* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SparseVector::UnsafeArenaSwap(SparseVector* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SparseVector::InternalSwap(SparseVector* other) {
  using std::swap;
  index_.InternalSwap(&other->index_);
  value_.InternalSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparseVector::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DenseFloatBinarySplit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DenseFloatBinarySplit::kFeatureColumnFieldNumber;
const int DenseFloatBinarySplit::kDimensionIdFieldNumber;
const int DenseFloatBinarySplit::kThresholdFieldNumber;
const int DenseFloatBinarySplit::kLeftIdFieldNumber;
const int DenseFloatBinarySplit::kRightIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DenseFloatBinarySplit::DenseFloatBinarySplit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDenseFloatBinarySplit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
}
DenseFloatBinarySplit::DenseFloatBinarySplit(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDenseFloatBinarySplit();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
}
DenseFloatBinarySplit::DenseFloatBinarySplit(const DenseFloatBinarySplit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&feature_column_, &from.feature_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&dimension_id_) -
    reinterpret_cast<char*>(&feature_column_)) + sizeof(dimension_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
}

void DenseFloatBinarySplit::SharedCtor() {
  ::memset(&feature_column_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dimension_id_) -
      reinterpret_cast<char*>(&feature_column_)) + sizeof(dimension_id_));
  _cached_size_ = 0;
}

DenseFloatBinarySplit::~DenseFloatBinarySplit() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  SharedDtor();
}

void DenseFloatBinarySplit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void DenseFloatBinarySplit::ArenaDtor(void* object) {
  DenseFloatBinarySplit* _this = reinterpret_cast< DenseFloatBinarySplit* >(object);
  (void)_this;
}
void DenseFloatBinarySplit::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DenseFloatBinarySplit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DenseFloatBinarySplit::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DenseFloatBinarySplit& DenseFloatBinarySplit::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDenseFloatBinarySplit();
  return *internal_default_instance();
}


void DenseFloatBinarySplit::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&feature_column_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dimension_id_) -
      reinterpret_cast<char*>(&feature_column_)) + sizeof(dimension_id_));
  _internal_metadata_.Clear();
}

bool DenseFloatBinarySplit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 feature_column = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_column_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float threshold = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dimension_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimension_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  return false;
#undef DO_
}

void DenseFloatBinarySplit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->feature_column(), output);
  }

  // float threshold = 2;
  if (this->threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->threshold(), output);
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_id(), output);
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->right_id(), output);
  }

  // int32 dimension_id = 5;
  if (this->dimension_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dimension_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
}

::google::protobuf::uint8* DenseFloatBinarySplit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->feature_column(), target);
  }

  // float threshold = 2;
  if (this->threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->threshold(), target);
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_id(), target);
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->right_id(), target);
  }

  // int32 dimension_id = 5;
  if (this->dimension_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dimension_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  return target;
}

size_t DenseFloatBinarySplit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->feature_column());
  }

  // float threshold = 2;
  if (this->threshold() != 0) {
    total_size += 1 + 4;
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_id());
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_id());
  }

  // int32 dimension_id = 5;
  if (this->dimension_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dimension_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DenseFloatBinarySplit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  GOOGLE_DCHECK_NE(&from, this);
  const DenseFloatBinarySplit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DenseFloatBinarySplit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
    MergeFrom(*source);
  }
}

void DenseFloatBinarySplit::MergeFrom(const DenseFloatBinarySplit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.feature_column() != 0) {
    set_feature_column(from.feature_column());
  }
  if (from.threshold() != 0) {
    set_threshold(from.threshold());
  }
  if (from.left_id() != 0) {
    set_left_id(from.left_id());
  }
  if (from.right_id() != 0) {
    set_right_id(from.right_id());
  }
  if (from.dimension_id() != 0) {
    set_dimension_id(from.dimension_id());
  }
}

void DenseFloatBinarySplit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseFloatBinarySplit::CopyFrom(const DenseFloatBinarySplit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.DenseFloatBinarySplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseFloatBinarySplit::IsInitialized() const {
  return true;
}

void DenseFloatBinarySplit::Swap(DenseFloatBinarySplit* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DenseFloatBinarySplit* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DenseFloatBinarySplit::UnsafeArenaSwap(DenseFloatBinarySplit* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DenseFloatBinarySplit::InternalSwap(DenseFloatBinarySplit* other) {
  using std::swap;
  swap(feature_column_, other->feature_column_);
  swap(threshold_, other->threshold_);
  swap(left_id_, other->left_id_);
  swap(right_id_, other->right_id_);
  swap(dimension_id_, other->dimension_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DenseFloatBinarySplit::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SparseFloatBinarySplitDefaultLeft::InitAsDefaultInstance() {
  ::tensorflow::boosted_trees::trees::_SparseFloatBinarySplitDefaultLeft_default_instance_._instance.get_mutable()->split_ = const_cast< ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit*>(
      ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::internal_default_instance());
}
void SparseFloatBinarySplitDefaultLeft::unsafe_arena_set_allocated_split(
    ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* split) {
  if (GetArenaNoVirtual() == NULL) {
    delete split_;
  }
  split_ = split;
  if (split) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft.split)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparseFloatBinarySplitDefaultLeft::kSplitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparseFloatBinarySplitDefaultLeft::SparseFloatBinarySplitDefaultLeft()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsSparseFloatBinarySplitDefaultLeft();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
}
SparseFloatBinarySplitDefaultLeft::SparseFloatBinarySplitDefaultLeft(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsSparseFloatBinarySplitDefaultLeft();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
}
SparseFloatBinarySplitDefaultLeft::SparseFloatBinarySplitDefaultLeft(const SparseFloatBinarySplitDefaultLeft& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_split()) {
    split_ = new ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit(*from.split_);
  } else {
    split_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
}

void SparseFloatBinarySplitDefaultLeft::SharedCtor() {
  split_ = NULL;
  _cached_size_ = 0;
}

SparseFloatBinarySplitDefaultLeft::~SparseFloatBinarySplitDefaultLeft() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  SharedDtor();
}

void SparseFloatBinarySplitDefaultLeft::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete split_;
}

void SparseFloatBinarySplitDefaultLeft::ArenaDtor(void* object) {
  SparseFloatBinarySplitDefaultLeft* _this = reinterpret_cast< SparseFloatBinarySplitDefaultLeft* >(object);
  (void)_this;
}
void SparseFloatBinarySplitDefaultLeft::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SparseFloatBinarySplitDefaultLeft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseFloatBinarySplitDefaultLeft::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SparseFloatBinarySplitDefaultLeft& SparseFloatBinarySplitDefaultLeft::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsSparseFloatBinarySplitDefaultLeft();
  return *internal_default_instance();
}


void SparseFloatBinarySplitDefaultLeft::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && split_ != NULL) {
    delete split_;
  }
  split_ = NULL;
  _internal_metadata_.Clear();
}

bool SparseFloatBinarySplitDefaultLeft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  return false;
#undef DO_
}

void SparseFloatBinarySplitDefaultLeft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
  if (this->has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *split_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
}

::google::protobuf::uint8* SparseFloatBinarySplitDefaultLeft::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
  if (this->has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *split_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  return target;
}

size_t SparseFloatBinarySplitDefaultLeft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
  if (this->has_split()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *split_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseFloatBinarySplitDefaultLeft::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseFloatBinarySplitDefaultLeft* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SparseFloatBinarySplitDefaultLeft>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
    MergeFrom(*source);
  }
}

void SparseFloatBinarySplitDefaultLeft::MergeFrom(const SparseFloatBinarySplitDefaultLeft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_split()) {
    mutable_split()->::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::MergeFrom(from.split());
  }
}

void SparseFloatBinarySplitDefaultLeft::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseFloatBinarySplitDefaultLeft::CopyFrom(const SparseFloatBinarySplitDefaultLeft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseFloatBinarySplitDefaultLeft::IsInitialized() const {
  return true;
}

void SparseFloatBinarySplitDefaultLeft::Swap(SparseFloatBinarySplitDefaultLeft* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SparseFloatBinarySplitDefaultLeft* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SparseFloatBinarySplitDefaultLeft::UnsafeArenaSwap(SparseFloatBinarySplitDefaultLeft* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SparseFloatBinarySplitDefaultLeft::InternalSwap(SparseFloatBinarySplitDefaultLeft* other) {
  using std::swap;
  swap(split_, other->split_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparseFloatBinarySplitDefaultLeft::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SparseFloatBinarySplitDefaultRight::InitAsDefaultInstance() {
  ::tensorflow::boosted_trees::trees::_SparseFloatBinarySplitDefaultRight_default_instance_._instance.get_mutable()->split_ = const_cast< ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit*>(
      ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::internal_default_instance());
}
void SparseFloatBinarySplitDefaultRight::unsafe_arena_set_allocated_split(
    ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* split) {
  if (GetArenaNoVirtual() == NULL) {
    delete split_;
  }
  split_ = split;
  if (split) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight.split)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparseFloatBinarySplitDefaultRight::kSplitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparseFloatBinarySplitDefaultRight::SparseFloatBinarySplitDefaultRight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsSparseFloatBinarySplitDefaultRight();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
}
SparseFloatBinarySplitDefaultRight::SparseFloatBinarySplitDefaultRight(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsSparseFloatBinarySplitDefaultRight();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
}
SparseFloatBinarySplitDefaultRight::SparseFloatBinarySplitDefaultRight(const SparseFloatBinarySplitDefaultRight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_split()) {
    split_ = new ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit(*from.split_);
  } else {
    split_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
}

void SparseFloatBinarySplitDefaultRight::SharedCtor() {
  split_ = NULL;
  _cached_size_ = 0;
}

SparseFloatBinarySplitDefaultRight::~SparseFloatBinarySplitDefaultRight() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  SharedDtor();
}

void SparseFloatBinarySplitDefaultRight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete split_;
}

void SparseFloatBinarySplitDefaultRight::ArenaDtor(void* object) {
  SparseFloatBinarySplitDefaultRight* _this = reinterpret_cast< SparseFloatBinarySplitDefaultRight* >(object);
  (void)_this;
}
void SparseFloatBinarySplitDefaultRight::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SparseFloatBinarySplitDefaultRight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseFloatBinarySplitDefaultRight::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SparseFloatBinarySplitDefaultRight& SparseFloatBinarySplitDefaultRight::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsSparseFloatBinarySplitDefaultRight();
  return *internal_default_instance();
}


void SparseFloatBinarySplitDefaultRight::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && split_ != NULL) {
    delete split_;
  }
  split_ = NULL;
  _internal_metadata_.Clear();
}

bool SparseFloatBinarySplitDefaultRight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  return false;
#undef DO_
}

void SparseFloatBinarySplitDefaultRight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
  if (this->has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *split_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
}

::google::protobuf::uint8* SparseFloatBinarySplitDefaultRight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
  if (this->has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *split_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  return target;
}

size_t SparseFloatBinarySplitDefaultRight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.boosted_trees.trees.DenseFloatBinarySplit split = 1;
  if (this->has_split()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *split_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseFloatBinarySplitDefaultRight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseFloatBinarySplitDefaultRight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SparseFloatBinarySplitDefaultRight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
    MergeFrom(*source);
  }
}

void SparseFloatBinarySplitDefaultRight::MergeFrom(const SparseFloatBinarySplitDefaultRight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_split()) {
    mutable_split()->::tensorflow::boosted_trees::trees::DenseFloatBinarySplit::MergeFrom(from.split());
  }
}

void SparseFloatBinarySplitDefaultRight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseFloatBinarySplitDefaultRight::CopyFrom(const SparseFloatBinarySplitDefaultRight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseFloatBinarySplitDefaultRight::IsInitialized() const {
  return true;
}

void SparseFloatBinarySplitDefaultRight::Swap(SparseFloatBinarySplitDefaultRight* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SparseFloatBinarySplitDefaultRight* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SparseFloatBinarySplitDefaultRight::UnsafeArenaSwap(SparseFloatBinarySplitDefaultRight* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SparseFloatBinarySplitDefaultRight::InternalSwap(SparseFloatBinarySplitDefaultRight* other) {
  using std::swap;
  swap(split_, other->split_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparseFloatBinarySplitDefaultRight::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CategoricalIdBinarySplit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoricalIdBinarySplit::kFeatureColumnFieldNumber;
const int CategoricalIdBinarySplit::kFeatureIdFieldNumber;
const int CategoricalIdBinarySplit::kLeftIdFieldNumber;
const int CategoricalIdBinarySplit::kRightIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoricalIdBinarySplit::CategoricalIdBinarySplit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsCategoricalIdBinarySplit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
}
CategoricalIdBinarySplit::CategoricalIdBinarySplit(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsCategoricalIdBinarySplit();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
}
CategoricalIdBinarySplit::CategoricalIdBinarySplit(const CategoricalIdBinarySplit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&feature_id_, &from.feature_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_id_) -
    reinterpret_cast<char*>(&feature_id_)) + sizeof(right_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
}

void CategoricalIdBinarySplit::SharedCtor() {
  ::memset(&feature_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_id_) -
      reinterpret_cast<char*>(&feature_id_)) + sizeof(right_id_));
  _cached_size_ = 0;
}

CategoricalIdBinarySplit::~CategoricalIdBinarySplit() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  SharedDtor();
}

void CategoricalIdBinarySplit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void CategoricalIdBinarySplit::ArenaDtor(void* object) {
  CategoricalIdBinarySplit* _this = reinterpret_cast< CategoricalIdBinarySplit* >(object);
  (void)_this;
}
void CategoricalIdBinarySplit::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CategoricalIdBinarySplit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoricalIdBinarySplit::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CategoricalIdBinarySplit& CategoricalIdBinarySplit::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsCategoricalIdBinarySplit();
  return *internal_default_instance();
}


void CategoricalIdBinarySplit::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&feature_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_id_) -
      reinterpret_cast<char*>(&feature_id_)) + sizeof(right_id_));
  _internal_metadata_.Clear();
}

bool CategoricalIdBinarySplit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 feature_column = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_column_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 feature_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feature_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  return false;
#undef DO_
}

void CategoricalIdBinarySplit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->feature_column(), output);
  }

  // int64 feature_id = 2;
  if (this->feature_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->feature_id(), output);
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_id(), output);
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->right_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
}

::google::protobuf::uint8* CategoricalIdBinarySplit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->feature_column(), target);
  }

  // int64 feature_id = 2;
  if (this->feature_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->feature_id(), target);
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_id(), target);
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->right_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  return target;
}

size_t CategoricalIdBinarySplit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 feature_id = 2;
  if (this->feature_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->feature_id());
  }

  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->feature_column());
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_id());
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoricalIdBinarySplit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  GOOGLE_DCHECK_NE(&from, this);
  const CategoricalIdBinarySplit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CategoricalIdBinarySplit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
    MergeFrom(*source);
  }
}

void CategoricalIdBinarySplit::MergeFrom(const CategoricalIdBinarySplit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.feature_id() != 0) {
    set_feature_id(from.feature_id());
  }
  if (from.feature_column() != 0) {
    set_feature_column(from.feature_column());
  }
  if (from.left_id() != 0) {
    set_left_id(from.left_id());
  }
  if (from.right_id() != 0) {
    set_right_id(from.right_id());
  }
}

void CategoricalIdBinarySplit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoricalIdBinarySplit::CopyFrom(const CategoricalIdBinarySplit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.CategoricalIdBinarySplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoricalIdBinarySplit::IsInitialized() const {
  return true;
}

void CategoricalIdBinarySplit::Swap(CategoricalIdBinarySplit* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CategoricalIdBinarySplit* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CategoricalIdBinarySplit::UnsafeArenaSwap(CategoricalIdBinarySplit* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CategoricalIdBinarySplit::InternalSwap(CategoricalIdBinarySplit* other) {
  using std::swap;
  swap(feature_id_, other->feature_id_);
  swap(feature_column_, other->feature_column_);
  swap(left_id_, other->left_id_);
  swap(right_id_, other->right_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CategoricalIdBinarySplit::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CategoricalIdSetMembershipBinarySplit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoricalIdSetMembershipBinarySplit::kFeatureColumnFieldNumber;
const int CategoricalIdSetMembershipBinarySplit::kFeatureIdsFieldNumber;
const int CategoricalIdSetMembershipBinarySplit::kLeftIdFieldNumber;
const int CategoricalIdSetMembershipBinarySplit::kRightIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoricalIdSetMembershipBinarySplit::CategoricalIdSetMembershipBinarySplit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsCategoricalIdSetMembershipBinarySplit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
}
CategoricalIdSetMembershipBinarySplit::CategoricalIdSetMembershipBinarySplit(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  feature_ids_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsCategoricalIdSetMembershipBinarySplit();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
}
CategoricalIdSetMembershipBinarySplit::CategoricalIdSetMembershipBinarySplit(const CategoricalIdSetMembershipBinarySplit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      feature_ids_(from.feature_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&feature_column_, &from.feature_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_id_) -
    reinterpret_cast<char*>(&feature_column_)) + sizeof(right_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
}

void CategoricalIdSetMembershipBinarySplit::SharedCtor() {
  ::memset(&feature_column_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_id_) -
      reinterpret_cast<char*>(&feature_column_)) + sizeof(right_id_));
  _cached_size_ = 0;
}

CategoricalIdSetMembershipBinarySplit::~CategoricalIdSetMembershipBinarySplit() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  SharedDtor();
}

void CategoricalIdSetMembershipBinarySplit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void CategoricalIdSetMembershipBinarySplit::ArenaDtor(void* object) {
  CategoricalIdSetMembershipBinarySplit* _this = reinterpret_cast< CategoricalIdSetMembershipBinarySplit* >(object);
  (void)_this;
}
void CategoricalIdSetMembershipBinarySplit::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CategoricalIdSetMembershipBinarySplit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoricalIdSetMembershipBinarySplit::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CategoricalIdSetMembershipBinarySplit& CategoricalIdSetMembershipBinarySplit::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsCategoricalIdSetMembershipBinarySplit();
  return *internal_default_instance();
}


void CategoricalIdSetMembershipBinarySplit::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_ids_.Clear();
  ::memset(&feature_column_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_id_) -
      reinterpret_cast<char*>(&feature_column_)) + sizeof(right_id_));
  _internal_metadata_.Clear();
}

bool CategoricalIdSetMembershipBinarySplit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 feature_column = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_column_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 feature_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_feature_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_feature_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  return false;
#undef DO_
}

void CategoricalIdSetMembershipBinarySplit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->feature_column(), output);
  }

  // repeated int64 feature_ids = 2;
  if (this->feature_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _feature_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->feature_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->feature_ids(i), output);
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_id(), output);
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->right_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
}

::google::protobuf::uint8* CategoricalIdSetMembershipBinarySplit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->feature_column(), target);
  }

  // repeated int64 feature_ids = 2;
  if (this->feature_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _feature_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->feature_ids_, target);
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_id(), target);
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->right_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  return target;
}

size_t CategoricalIdSetMembershipBinarySplit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 feature_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->feature_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _feature_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 feature_column = 1;
  if (this->feature_column() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->feature_column());
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_id());
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoricalIdSetMembershipBinarySplit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  GOOGLE_DCHECK_NE(&from, this);
  const CategoricalIdSetMembershipBinarySplit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CategoricalIdSetMembershipBinarySplit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
    MergeFrom(*source);
  }
}

void CategoricalIdSetMembershipBinarySplit::MergeFrom(const CategoricalIdSetMembershipBinarySplit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_ids_.MergeFrom(from.feature_ids_);
  if (from.feature_column() != 0) {
    set_feature_column(from.feature_column());
  }
  if (from.left_id() != 0) {
    set_left_id(from.left_id());
  }
  if (from.right_id() != 0) {
    set_right_id(from.right_id());
  }
}

void CategoricalIdSetMembershipBinarySplit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoricalIdSetMembershipBinarySplit::CopyFrom(const CategoricalIdSetMembershipBinarySplit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoricalIdSetMembershipBinarySplit::IsInitialized() const {
  return true;
}

void CategoricalIdSetMembershipBinarySplit::Swap(CategoricalIdSetMembershipBinarySplit* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CategoricalIdSetMembershipBinarySplit* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CategoricalIdSetMembershipBinarySplit::UnsafeArenaSwap(CategoricalIdSetMembershipBinarySplit* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CategoricalIdSetMembershipBinarySplit::InternalSwap(CategoricalIdSetMembershipBinarySplit* other) {
  using std::swap;
  feature_ids_.InternalSwap(&other->feature_ids_);
  swap(feature_column_, other->feature_column_);
  swap(left_id_, other->left_id_);
  swap(right_id_, other->right_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CategoricalIdSetMembershipBinarySplit::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DecisionTreeConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionTreeConfig::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionTreeConfig::DecisionTreeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDecisionTreeConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.DecisionTreeConfig)
}
DecisionTreeConfig::DecisionTreeConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  nodes_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDecisionTreeConfig();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.DecisionTreeConfig)
}
DecisionTreeConfig::DecisionTreeConfig(const DecisionTreeConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.DecisionTreeConfig)
}

void DecisionTreeConfig::SharedCtor() {
  _cached_size_ = 0;
}

DecisionTreeConfig::~DecisionTreeConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  SharedDtor();
}

void DecisionTreeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void DecisionTreeConfig::ArenaDtor(void* object) {
  DecisionTreeConfig* _this = reinterpret_cast< DecisionTreeConfig* >(object);
  (void)_this;
}
void DecisionTreeConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DecisionTreeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionTreeConfig::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecisionTreeConfig& DecisionTreeConfig::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDecisionTreeConfig();
  return *internal_default_instance();
}


void DecisionTreeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear();
}

bool DecisionTreeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.boosted_trees.trees.TreeNode nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  return false;
#undef DO_
}

void DecisionTreeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.boosted_trees.trees.TreeNode nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->nodes(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.DecisionTreeConfig)
}

::google::protobuf::uint8* DecisionTreeConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.boosted_trees.trees.TreeNode nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  return target;
}

size_t DecisionTreeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.boosted_trees.trees.TreeNode nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionTreeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionTreeConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionTreeConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.DecisionTreeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.DecisionTreeConfig)
    MergeFrom(*source);
  }
}

void DecisionTreeConfig::MergeFrom(const DecisionTreeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void DecisionTreeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionTreeConfig::CopyFrom(const DecisionTreeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.DecisionTreeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionTreeConfig::IsInitialized() const {
  return true;
}

void DecisionTreeConfig::Swap(DecisionTreeConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DecisionTreeConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DecisionTreeConfig::UnsafeArenaSwap(DecisionTreeConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DecisionTreeConfig::InternalSwap(DecisionTreeConfig* other) {
  using std::swap;
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionTreeConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DecisionTreeMetadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionTreeMetadata::kNumTreeWeightUpdatesFieldNumber;
const int DecisionTreeMetadata::kNumLayersGrownFieldNumber;
const int DecisionTreeMetadata::kIsFinalizedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionTreeMetadata::DecisionTreeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDecisionTreeMetadata();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
}
DecisionTreeMetadata::DecisionTreeMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDecisionTreeMetadata();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
}
DecisionTreeMetadata::DecisionTreeMetadata(const DecisionTreeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_tree_weight_updates_, &from.num_tree_weight_updates_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_finalized_) -
    reinterpret_cast<char*>(&num_tree_weight_updates_)) + sizeof(is_finalized_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
}

void DecisionTreeMetadata::SharedCtor() {
  ::memset(&num_tree_weight_updates_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_finalized_) -
      reinterpret_cast<char*>(&num_tree_weight_updates_)) + sizeof(is_finalized_));
  _cached_size_ = 0;
}

DecisionTreeMetadata::~DecisionTreeMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  SharedDtor();
}

void DecisionTreeMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void DecisionTreeMetadata::ArenaDtor(void* object) {
  DecisionTreeMetadata* _this = reinterpret_cast< DecisionTreeMetadata* >(object);
  (void)_this;
}
void DecisionTreeMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DecisionTreeMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionTreeMetadata::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecisionTreeMetadata& DecisionTreeMetadata::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDecisionTreeMetadata();
  return *internal_default_instance();
}


void DecisionTreeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_tree_weight_updates_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_finalized_) -
      reinterpret_cast<char*>(&num_tree_weight_updates_)) + sizeof(is_finalized_));
  _internal_metadata_.Clear();
}

bool DecisionTreeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_tree_weight_updates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tree_weight_updates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_layers_grown = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_layers_grown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_finalized = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finalized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  return false;
#undef DO_
}

void DecisionTreeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_tree_weight_updates = 1;
  if (this->num_tree_weight_updates() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_tree_weight_updates(), output);
  }

  // int32 num_layers_grown = 2;
  if (this->num_layers_grown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_layers_grown(), output);
  }

  // bool is_finalized = 3;
  if (this->is_finalized() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_finalized(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
}

::google::protobuf::uint8* DecisionTreeMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_tree_weight_updates = 1;
  if (this->num_tree_weight_updates() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_tree_weight_updates(), target);
  }

  // int32 num_layers_grown = 2;
  if (this->num_layers_grown() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_layers_grown(), target);
  }

  // bool is_finalized = 3;
  if (this->is_finalized() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_finalized(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  return target;
}

size_t DecisionTreeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 num_tree_weight_updates = 1;
  if (this->num_tree_weight_updates() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_tree_weight_updates());
  }

  // int32 num_layers_grown = 2;
  if (this->num_layers_grown() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_layers_grown());
  }

  // bool is_finalized = 3;
  if (this->is_finalized() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionTreeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionTreeMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionTreeMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
    MergeFrom(*source);
  }
}

void DecisionTreeMetadata::MergeFrom(const DecisionTreeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_tree_weight_updates() != 0) {
    set_num_tree_weight_updates(from.num_tree_weight_updates());
  }
  if (from.num_layers_grown() != 0) {
    set_num_layers_grown(from.num_layers_grown());
  }
  if (from.is_finalized() != 0) {
    set_is_finalized(from.is_finalized());
  }
}

void DecisionTreeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionTreeMetadata::CopyFrom(const DecisionTreeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.DecisionTreeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionTreeMetadata::IsInitialized() const {
  return true;
}

void DecisionTreeMetadata::Swap(DecisionTreeMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DecisionTreeMetadata* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DecisionTreeMetadata::UnsafeArenaSwap(DecisionTreeMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DecisionTreeMetadata::InternalSwap(DecisionTreeMetadata* other) {
  using std::swap;
  swap(num_tree_weight_updates_, other->num_tree_weight_updates_);
  swap(num_layers_grown_, other->num_layers_grown_);
  swap(is_finalized_, other->is_finalized_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionTreeMetadata::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GrowingMetadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GrowingMetadata::kNumTreesAttemptedFieldNumber;
const int GrowingMetadata::kNumLayersAttemptedFieldNumber;
const int GrowingMetadata::kUsedHandlerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GrowingMetadata::GrowingMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsGrowingMetadata();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.GrowingMetadata)
}
GrowingMetadata::GrowingMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  used_handler_ids_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsGrowingMetadata();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.GrowingMetadata)
}
GrowingMetadata::GrowingMetadata(const GrowingMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      used_handler_ids_(from.used_handler_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_trees_attempted_, &from.num_trees_attempted_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_layers_attempted_) -
    reinterpret_cast<char*>(&num_trees_attempted_)) + sizeof(num_layers_attempted_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.GrowingMetadata)
}

void GrowingMetadata::SharedCtor() {
  ::memset(&num_trees_attempted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_layers_attempted_) -
      reinterpret_cast<char*>(&num_trees_attempted_)) + sizeof(num_layers_attempted_));
  _cached_size_ = 0;
}

GrowingMetadata::~GrowingMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.GrowingMetadata)
  SharedDtor();
}

void GrowingMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GrowingMetadata::ArenaDtor(void* object) {
  GrowingMetadata* _this = reinterpret_cast< GrowingMetadata* >(object);
  (void)_this;
}
void GrowingMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GrowingMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowingMetadata::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GrowingMetadata& GrowingMetadata::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsGrowingMetadata();
  return *internal_default_instance();
}


void GrowingMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.GrowingMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  used_handler_ids_.Clear();
  ::memset(&num_trees_attempted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_layers_attempted_) -
      reinterpret_cast<char*>(&num_trees_attempted_)) + sizeof(num_layers_attempted_));
  _internal_metadata_.Clear();
}

bool GrowingMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.GrowingMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 num_trees_attempted = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_trees_attempted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_layers_attempted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_layers_attempted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 used_handler_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_used_handler_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_used_handler_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.GrowingMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.GrowingMetadata)
  return false;
#undef DO_
}

void GrowingMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.GrowingMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_trees_attempted = 1;
  if (this->num_trees_attempted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->num_trees_attempted(), output);
  }

  // int64 num_layers_attempted = 2;
  if (this->num_layers_attempted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num_layers_attempted(), output);
  }

  // repeated int64 used_handler_ids = 3;
  if (this->used_handler_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _used_handler_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->used_handler_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->used_handler_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.GrowingMetadata)
}

::google::protobuf::uint8* GrowingMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.GrowingMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_trees_attempted = 1;
  if (this->num_trees_attempted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->num_trees_attempted(), target);
  }

  // int64 num_layers_attempted = 2;
  if (this->num_layers_attempted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num_layers_attempted(), target);
  }

  // repeated int64 used_handler_ids = 3;
  if (this->used_handler_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _used_handler_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->used_handler_ids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.GrowingMetadata)
  return target;
}

size_t GrowingMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.GrowingMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 used_handler_ids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->used_handler_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _used_handler_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int64 num_trees_attempted = 1;
  if (this->num_trees_attempted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_trees_attempted());
  }

  // int64 num_layers_attempted = 2;
  if (this->num_layers_attempted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_layers_attempted());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowingMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.GrowingMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const GrowingMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GrowingMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.GrowingMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.GrowingMetadata)
    MergeFrom(*source);
  }
}

void GrowingMetadata::MergeFrom(const GrowingMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.GrowingMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  used_handler_ids_.MergeFrom(from.used_handler_ids_);
  if (from.num_trees_attempted() != 0) {
    set_num_trees_attempted(from.num_trees_attempted());
  }
  if (from.num_layers_attempted() != 0) {
    set_num_layers_attempted(from.num_layers_attempted());
  }
}

void GrowingMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.GrowingMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowingMetadata::CopyFrom(const GrowingMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.GrowingMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowingMetadata::IsInitialized() const {
  return true;
}

void GrowingMetadata::Swap(GrowingMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GrowingMetadata* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GrowingMetadata::UnsafeArenaSwap(GrowingMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GrowingMetadata::InternalSwap(GrowingMetadata* other) {
  using std::swap;
  used_handler_ids_.InternalSwap(&other->used_handler_ids_);
  swap(num_trees_attempted_, other->num_trees_attempted_);
  swap(num_layers_attempted_, other->num_layers_attempted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GrowingMetadata::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DecisionTreeEnsembleConfig::InitAsDefaultInstance() {
  ::tensorflow::boosted_trees::trees::_DecisionTreeEnsembleConfig_default_instance_._instance.get_mutable()->growing_metadata_ = const_cast< ::tensorflow::boosted_trees::trees::GrowingMetadata*>(
      ::tensorflow::boosted_trees::trees::GrowingMetadata::internal_default_instance());
}
void DecisionTreeEnsembleConfig::unsafe_arena_set_allocated_growing_metadata(
    ::tensorflow::boosted_trees::trees::GrowingMetadata* growing_metadata) {
  if (GetArenaNoVirtual() == NULL) {
    delete growing_metadata_;
  }
  growing_metadata_ = growing_metadata;
  if (growing_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig.growing_metadata)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionTreeEnsembleConfig::kTreesFieldNumber;
const int DecisionTreeEnsembleConfig::kTreeWeightsFieldNumber;
const int DecisionTreeEnsembleConfig::kTreeMetadataFieldNumber;
const int DecisionTreeEnsembleConfig::kGrowingMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionTreeEnsembleConfig::DecisionTreeEnsembleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDecisionTreeEnsembleConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
}
DecisionTreeEnsembleConfig::DecisionTreeEnsembleConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  trees_(arena),
  tree_weights_(arena),
  tree_metadata_(arena) {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDecisionTreeEnsembleConfig();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
}
DecisionTreeEnsembleConfig::DecisionTreeEnsembleConfig(const DecisionTreeEnsembleConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trees_(from.trees_),
      tree_weights_(from.tree_weights_),
      tree_metadata_(from.tree_metadata_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_growing_metadata()) {
    growing_metadata_ = new ::tensorflow::boosted_trees::trees::GrowingMetadata(*from.growing_metadata_);
  } else {
    growing_metadata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
}

void DecisionTreeEnsembleConfig::SharedCtor() {
  growing_metadata_ = NULL;
  _cached_size_ = 0;
}

DecisionTreeEnsembleConfig::~DecisionTreeEnsembleConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  SharedDtor();
}

void DecisionTreeEnsembleConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete growing_metadata_;
}

void DecisionTreeEnsembleConfig::ArenaDtor(void* object) {
  DecisionTreeEnsembleConfig* _this = reinterpret_cast< DecisionTreeEnsembleConfig* >(object);
  (void)_this;
}
void DecisionTreeEnsembleConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DecisionTreeEnsembleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionTreeEnsembleConfig::descriptor() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecisionTreeEnsembleConfig& DecisionTreeEnsembleConfig::default_instance() {
  ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::InitDefaultsDecisionTreeEnsembleConfig();
  return *internal_default_instance();
}


void DecisionTreeEnsembleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trees_.Clear();
  tree_weights_.Clear();
  tree_metadata_.Clear();
  if (GetArenaNoVirtual() == NULL && growing_metadata_ != NULL) {
    delete growing_metadata_;
  }
  growing_metadata_ = NULL;
  _internal_metadata_.Clear();
}

bool DecisionTreeEnsembleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.boosted_trees.trees.DecisionTreeConfig trees = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trees()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tree_weights = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tree_weights())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_tree_weights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.boosted_trees.trees.DecisionTreeMetadata tree_metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tree_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.trees.GrowingMetadata growing_metadata = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_growing_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  return false;
#undef DO_
}

void DecisionTreeEnsembleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.boosted_trees.trees.DecisionTreeConfig trees = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trees_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->trees(static_cast<int>(i)),
      output);
  }

  // repeated float tree_weights = 2;
  if (this->tree_weights_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tree_weights_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->tree_weights().data(), this->tree_weights_size(), output);
  }

  // repeated .tensorflow.boosted_trees.trees.DecisionTreeMetadata tree_metadata = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tree_metadata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->tree_metadata(static_cast<int>(i)),
      output);
  }

  // .tensorflow.boosted_trees.trees.GrowingMetadata growing_metadata = 4;
  if (this->has_growing_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *growing_metadata_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
}

::google::protobuf::uint8* DecisionTreeEnsembleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.boosted_trees.trees.DecisionTreeConfig trees = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trees_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->trees(static_cast<int>(i)), deterministic, target);
  }

  // repeated float tree_weights = 2;
  if (this->tree_weights_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _tree_weights_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tree_weights_, target);
  }

  // repeated .tensorflow.boosted_trees.trees.DecisionTreeMetadata tree_metadata = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tree_metadata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->tree_metadata(static_cast<int>(i)), deterministic, target);
  }

  // .tensorflow.boosted_trees.trees.GrowingMetadata growing_metadata = 4;
  if (this->has_growing_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *growing_metadata_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  return target;
}

size_t DecisionTreeEnsembleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.boosted_trees.trees.DecisionTreeConfig trees = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trees_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trees(static_cast<int>(i)));
    }
  }

  // repeated float tree_weights = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tree_weights_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tree_weights_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .tensorflow.boosted_trees.trees.DecisionTreeMetadata tree_metadata = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tree_metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tree_metadata(static_cast<int>(i)));
    }
  }

  // .tensorflow.boosted_trees.trees.GrowingMetadata growing_metadata = 4;
  if (this->has_growing_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *growing_metadata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionTreeEnsembleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionTreeEnsembleConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionTreeEnsembleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
    MergeFrom(*source);
  }
}

void DecisionTreeEnsembleConfig::MergeFrom(const DecisionTreeEnsembleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trees_.MergeFrom(from.trees_);
  tree_weights_.MergeFrom(from.tree_weights_);
  tree_metadata_.MergeFrom(from.tree_metadata_);
  if (from.has_growing_metadata()) {
    mutable_growing_metadata()->::tensorflow::boosted_trees::trees::GrowingMetadata::MergeFrom(from.growing_metadata());
  }
}

void DecisionTreeEnsembleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionTreeEnsembleConfig::CopyFrom(const DecisionTreeEnsembleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionTreeEnsembleConfig::IsInitialized() const {
  return true;
}

void DecisionTreeEnsembleConfig::Swap(DecisionTreeEnsembleConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DecisionTreeEnsembleConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DecisionTreeEnsembleConfig::UnsafeArenaSwap(DecisionTreeEnsembleConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DecisionTreeEnsembleConfig::InternalSwap(DecisionTreeEnsembleConfig* other) {
  using std::swap;
  CastToBase(&trees_)->InternalSwap(CastToBase(&other->trees_));
  tree_weights_.InternalSwap(&other->tree_weights_);
  CastToBase(&tree_metadata_)->InternalSwap(CastToBase(&other->tree_metadata_));
  swap(growing_metadata_, other->growing_metadata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionTreeEnsembleConfig::GetMetadata() const {
  protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2ftree_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace trees
}  // namespace boosted_trees
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::trees::TreeNode* Arena::CreateMessage< ::tensorflow::boosted_trees::trees::TreeNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::trees::TreeNode >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::trees::TreeNodeMetadata* Arena::CreateMessage< ::tensorflow::boosted_trees::trees::TreeNodeMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::trees::TreeNodeMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::trees::Leaf* Arena::CreateMessage< ::tensorflow::boosted_trees::trees::Leaf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::trees::Leaf >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::trees::Vector* Arena::CreateMessage< ::tensorflow::boosted_trees::trees::Vector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::trees::Vector >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::trees::SparseVector* Arena::CreateMessage< ::tensorflow::boosted_trees::trees::SparseVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::trees::SparseVector >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit* Arena::CreateMessage< ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::trees::DenseFloatBinarySplit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft* Arena::CreateMessage< ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultLeft >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight* Arena::CreateMessage< ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::trees::SparseFloatBinarySplitDefaultRight >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit* Arena::CreateMessage< ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::trees::CategoricalIdBinarySplit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit* Arena::CreateMessage< ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::trees::CategoricalIdSetMembershipBinarySplit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::trees::DecisionTreeConfig* Arena::CreateMessage< ::tensorflow::boosted_trees::trees::DecisionTreeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::trees::DecisionTreeConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::trees::DecisionTreeMetadata* Arena::CreateMessage< ::tensorflow::boosted_trees::trees::DecisionTreeMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::trees::DecisionTreeMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::trees::GrowingMetadata* Arena::CreateMessage< ::tensorflow::boosted_trees::trees::GrowingMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::trees::GrowingMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::boosted_trees::trees::DecisionTreeEnsembleConfig* Arena::CreateMessage< ::tensorflow::boosted_trees::trees::DecisionTreeEnsembleConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::boosted_trees::trees::DecisionTreeEnsembleConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
